version: '3.8'

services:
  nginx:
    image: nginx:1.29
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      grafana:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s


  frontend:
    image: ghcr.io/felixhertweck/seatreservation-frontend:main
    
    # ports:
    #   - "3000:3000" 

    networks:
      - app-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s


  backend:    
    user: "${UID}:${GID}"
    image: ghcr.io/felixhertweck/seatreservation-backend:main

    # Uncomment this line to use the native image
    # image: ghcr.io/felixhertweck/seatreservation-backend-native:latest

    # ports:
    #   - "8080:8080" 
    
    # healthcheck already implemented in Dockerfile

    volumes:
      - ./keys:/deployments/keys:ro

    # Override application.yaml
    #  - ./application.yaml:/deployments/config/application.yaml

    # Export templates for PDF generation
    #  - ./export-template:/export-template:ro

    environment:
      # Application configuration
      - APP_URL=${APP_URL}

      # If you use only HTTP, set this to false
      # - SSL_ENABLED=false

      # Email configuration
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_TLS=${MAIL_TLS}
      - MAIL_START_TLS=${MAIL_START_TLS}

      # Database configuration
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    networks:
      - app-network

    depends_on:
      db:
        condition: service_healthy


  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=seatReservation
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
    # ports:
    #  - "5432:5432"

    volumes:
      - db_data:/var/lib/postgresql/data
      
    networks:
      - app-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s


  prometheus:
    image: prom/prometheus:v3.6.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

    # ports:
    #  - "9090:9090"

    depends_on:
      - backend

    networks:
      - app-network

    restart: unless-stopped


  grafana:
    image: grafana/grafana:12.0

    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards

    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=${APP_URL}/grafana

    # ports:
    #   - "3000:3000"

    depends_on:
      - prometheus

    networks:
      - app-network
      
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    

networks:
  app-network:
    external: false

volumes:
  db_data:
  prometheus_data:
  grafana_data: