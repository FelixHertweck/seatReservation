version: '3.8'

services:
  nginx:
    image: nginx:1.29
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s


  frontend:
    image: ghcr.io/felixhertweck/seatreservation-frontend:main
    
    # ports:
    #   - "3000:3000" 

    networks:
      - app-network

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://0.0.0.0:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s


  backend:    
    user: "${UID}:${GID}"
    image: ghcr.io/felixhertweck/seatreservation-backend:main

    # Uncomment this line to use the native image
    # image: ghcr.io/felixhertweck/seatreservation-backend-native:latest

    # ports:
    #   - "8080:8080" 
    
    # healthcheck already implemented in Dockerfile

    volumes:
      - ./keys:/deployments/keys:ro

    # Override application.yaml
    #  - ./application.yaml:/deployments/config/application.yaml

    environment:
      # Application configuration
      - APP_URL=${APP_URL}

      # Email configuration
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_TLS=${MAIL_TLS}
      - MAIL_START_TLS=${MAIL_START_TLS}

      # Database configuration
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    networks:
      - app-network

    depends_on:
      db:
        condition: service_healthy


  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=seatReservation
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      
    # ports:
    #  - "5432:5432"

    volumes:
      - db_data:/var/lib/postgresql/data
      
    networks:
      - app-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s


networks:
  app-network:
    external: false

volumes:
  db_data: