// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostApiAuthLoginData, PostApiAuthLoginResponses, PostApiAuthLoginErrors, GetApiManagerEventlocationsData, GetApiManagerEventlocationsResponses, GetApiManagerEventlocationsErrors, PostApiManagerEventlocationsData, PostApiManagerEventlocationsResponses, PostApiManagerEventlocationsErrors, DeleteApiManagerEventlocationsByIdData, DeleteApiManagerEventlocationsByIdResponses, DeleteApiManagerEventlocationsByIdErrors, PutApiManagerEventlocationsByIdData, PutApiManagerEventlocationsByIdResponses, PutApiManagerEventlocationsByIdErrors, GetApiManagerEventsData, GetApiManagerEventsResponses, GetApiManagerEventsErrors, PostApiManagerEventsData, PostApiManagerEventsResponses, PostApiManagerEventsErrors, PutApiManagerEventsByIdData, PutApiManagerEventsByIdResponses, PutApiManagerEventsByIdErrors, PostApiManagerReservationAllowanceData, PostApiManagerReservationAllowanceResponses, PostApiManagerReservationAllowanceErrors, GetApiManagerReservationAllowanceByIdData, GetApiManagerReservationAllowanceByIdResponses, GetApiManagerReservationAllowanceByIdErrors, GetApiManagerReservationsData, GetApiManagerReservationsResponses, GetApiManagerReservationsErrors, PostApiManagerReservationsData, PostApiManagerReservationsResponses, PostApiManagerReservationsErrors, GetApiManagerReservationsEventByIdData, GetApiManagerReservationsEventByIdResponses, GetApiManagerReservationsEventByIdErrors, DeleteApiManagerReservationsByIdData, DeleteApiManagerReservationsByIdResponses, DeleteApiManagerReservationsByIdErrors, GetApiManagerReservationsByIdData, GetApiManagerReservationsByIdResponses, GetApiManagerReservationsByIdErrors, PutApiManagerReservationsByIdData, PutApiManagerReservationsByIdResponses, PutApiManagerReservationsByIdErrors, GetApiManagerSeatsData, GetApiManagerSeatsResponses, GetApiManagerSeatsErrors, PostApiManagerSeatsData, PostApiManagerSeatsResponses, PostApiManagerSeatsErrors, DeleteApiManagerSeatsByIdData, DeleteApiManagerSeatsByIdResponses, DeleteApiManagerSeatsByIdErrors, GetApiManagerSeatsByIdData, GetApiManagerSeatsByIdResponses, GetApiManagerSeatsByIdErrors, PutApiManagerSeatsByIdData, PutApiManagerSeatsByIdResponses, PutApiManagerSeatsByIdErrors, GetApiUserConfirmEmailData, GetApiUserConfirmEmailResponses, GetApiUserConfirmEmailErrors, GetApiUserEventsData, GetApiUserEventsResponses, GetApiUserEventsErrors, GetApiUserEventsAvailableReservationsByEventIdData, GetApiUserEventsAvailableReservationsByEventIdResponses, GetApiUserEventsAvailableReservationsByEventIdErrors, GetApiUserEventsAvailableSeatsByEventIdData, GetApiUserEventsAvailableSeatsByEventIdResponses, GetApiUserEventsAvailableSeatsByEventIdErrors, GetApiUserReservationsData, GetApiUserReservationsResponses, GetApiUserReservationsErrors, PostApiUserReservationsData, PostApiUserReservationsResponses, PostApiUserReservationsErrors, DeleteApiUserReservationsByIdData, DeleteApiUserReservationsByIdResponses, DeleteApiUserReservationsByIdErrors, GetApiUserReservationsByIdData, GetApiUserReservationsByIdResponses, GetApiUserReservationsByIdErrors, PostApiUsersAdminData, PostApiUsersAdminResponses, PostApiUsersAdminErrors, GetApiUsersAdminRolesData, GetApiUsersAdminRolesResponses, GetApiUsersAdminRolesErrors, DeleteApiUsersAdminByIdData, DeleteApiUsersAdminByIdResponses, DeleteApiUsersAdminByIdErrors, GetApiUsersAdminByIdData, GetApiUsersAdminByIdResponses, GetApiUsersAdminByIdErrors, PutApiUsersAdminByIdData, PutApiUsersAdminByIdResponses, PutApiUsersAdminByIdErrors, GetApiUsersManagerData, GetApiUsersManagerResponses, GetApiUsersManagerErrors, PutApiUsersMeData, PutApiUsersMeResponses, PutApiUsersMeErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { getApiManagerEventlocationsResponseTransformer, postApiManagerEventlocationsResponseTransformer, putApiManagerEventlocationsByIdResponseTransformer, getApiManagerEventsResponseTransformer, postApiManagerEventsResponseTransformer, putApiManagerEventsByIdResponseTransformer, postApiManagerReservationAllowanceResponseTransformer, getApiManagerReservationAllowanceByIdResponseTransformer, getApiManagerReservationsResponseTransformer, postApiManagerReservationsResponseTransformer, getApiManagerReservationsEventByIdResponseTransformer, getApiManagerReservationsByIdResponseTransformer, putApiManagerReservationsByIdResponseTransformer, getApiManagerSeatsResponseTransformer, postApiManagerSeatsResponseTransformer, getApiManagerSeatsByIdResponseTransformer, putApiManagerSeatsByIdResponseTransformer, getApiUserEventsResponseTransformer, getApiUserReservationsResponseTransformer, postApiUserReservationsResponseTransformer, getApiUserReservationsByIdResponseTransformer, postApiUsersAdminResponseTransformer, getApiUsersAdminByIdResponseTransformer, putApiUsersAdminByIdResponseTransformer, getApiUsersManagerResponseTransformer, putApiUsersMeResponseTransformer } from './transformers.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiAuthLoginResponses, PostApiAuthLoginErrors, ThrowOnError>({
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Event Locations By Current Manager
 */
export const getApiManagerEventlocations = <ThrowOnError extends boolean = false>(options?: Options<GetApiManagerEventlocationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiManagerEventlocationsResponses, GetApiManagerEventlocationsErrors, ThrowOnError>({
        responseTransformer: getApiManagerEventlocationsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/eventlocations',
        ...options
    });
};

/**
 * Create Event Location
 */
export const postApiManagerEventlocations = <ThrowOnError extends boolean = false>(options: Options<PostApiManagerEventlocationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiManagerEventlocationsResponses, PostApiManagerEventlocationsErrors, ThrowOnError>({
        responseTransformer: postApiManagerEventlocationsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/eventlocations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Event Location
 */
export const deleteApiManagerEventlocationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiManagerEventlocationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiManagerEventlocationsByIdResponses, DeleteApiManagerEventlocationsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/eventlocations/{id}',
        ...options
    });
};

/**
 * Update Event Location
 */
export const putApiManagerEventlocationsById = <ThrowOnError extends boolean = false>(options: Options<PutApiManagerEventlocationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiManagerEventlocationsByIdResponses, PutApiManagerEventlocationsByIdErrors, ThrowOnError>({
        responseTransformer: putApiManagerEventlocationsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/eventlocations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Events By Current Manager
 */
export const getApiManagerEvents = <ThrowOnError extends boolean = false>(options?: Options<GetApiManagerEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiManagerEventsResponses, GetApiManagerEventsErrors, ThrowOnError>({
        responseTransformer: getApiManagerEventsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/events',
        ...options
    });
};

/**
 * Create Event
 */
export const postApiManagerEvents = <ThrowOnError extends boolean = false>(options: Options<PostApiManagerEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiManagerEventsResponses, PostApiManagerEventsErrors, ThrowOnError>({
        responseTransformer: postApiManagerEventsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Event
 */
export const putApiManagerEventsById = <ThrowOnError extends boolean = false>(options: Options<PutApiManagerEventsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiManagerEventsByIdResponses, PutApiManagerEventsByIdErrors, ThrowOnError>({
        responseTransformer: putApiManagerEventsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set Reservations Allowed For User
 */
export const postApiManagerReservationAllowance = <ThrowOnError extends boolean = false>(options: Options<PostApiManagerReservationAllowanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiManagerReservationAllowanceResponses, PostApiManagerReservationAllowanceErrors, ThrowOnError>({
        responseTransformer: postApiManagerReservationAllowanceResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservationAllowance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Reservation Allowance By Id
 */
export const getApiManagerReservationAllowanceById = <ThrowOnError extends boolean = false>(options: Options<GetApiManagerReservationAllowanceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiManagerReservationAllowanceByIdResponses, GetApiManagerReservationAllowanceByIdErrors, ThrowOnError>({
        responseTransformer: getApiManagerReservationAllowanceByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservationAllowance/{id}',
        ...options
    });
};

/**
 * Get All Reservations
 */
export const getApiManagerReservations = <ThrowOnError extends boolean = false>(options?: Options<GetApiManagerReservationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiManagerReservationsResponses, GetApiManagerReservationsErrors, ThrowOnError>({
        responseTransformer: getApiManagerReservationsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservations',
        ...options
    });
};

/**
 * Create Reservation
 */
export const postApiManagerReservations = <ThrowOnError extends boolean = false>(options: Options<PostApiManagerReservationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiManagerReservationsResponses, PostApiManagerReservationsErrors, ThrowOnError>({
        responseTransformer: postApiManagerReservationsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Reservations By Event Id
 */
export const getApiManagerReservationsEventById = <ThrowOnError extends boolean = false>(options: Options<GetApiManagerReservationsEventByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiManagerReservationsEventByIdResponses, GetApiManagerReservationsEventByIdErrors, ThrowOnError>({
        responseTransformer: getApiManagerReservationsEventByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservations/event/{id}',
        ...options
    });
};

/**
 * Delete Reservation
 */
export const deleteApiManagerReservationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiManagerReservationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiManagerReservationsByIdResponses, DeleteApiManagerReservationsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservations/{id}',
        ...options
    });
};

/**
 * Get Reservation By Id
 */
export const getApiManagerReservationsById = <ThrowOnError extends boolean = false>(options: Options<GetApiManagerReservationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiManagerReservationsByIdResponses, GetApiManagerReservationsByIdErrors, ThrowOnError>({
        responseTransformer: getApiManagerReservationsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservations/{id}',
        ...options
    });
};

/**
 * Update Reservation
 */
export const putApiManagerReservationsById = <ThrowOnError extends boolean = false>(options: Options<PutApiManagerReservationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiManagerReservationsByIdResponses, PutApiManagerReservationsByIdErrors, ThrowOnError>({
        responseTransformer: putApiManagerReservationsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/reservations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Manager Seats
 */
export const getApiManagerSeats = <ThrowOnError extends boolean = false>(options?: Options<GetApiManagerSeatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiManagerSeatsResponses, GetApiManagerSeatsErrors, ThrowOnError>({
        responseTransformer: getApiManagerSeatsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/seats',
        ...options
    });
};

/**
 * Create Seat
 */
export const postApiManagerSeats = <ThrowOnError extends boolean = false>(options: Options<PostApiManagerSeatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiManagerSeatsResponses, PostApiManagerSeatsErrors, ThrowOnError>({
        responseTransformer: postApiManagerSeatsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/seats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Manager Seat
 */
export const deleteApiManagerSeatsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiManagerSeatsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiManagerSeatsByIdResponses, DeleteApiManagerSeatsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/seats/{id}',
        ...options
    });
};

/**
 * Get Manager Seat By Id
 */
export const getApiManagerSeatsById = <ThrowOnError extends boolean = false>(options: Options<GetApiManagerSeatsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiManagerSeatsByIdResponses, GetApiManagerSeatsByIdErrors, ThrowOnError>({
        responseTransformer: getApiManagerSeatsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/seats/{id}',
        ...options
    });
};

/**
 * Update Manager Seat
 */
export const putApiManagerSeatsById = <ThrowOnError extends boolean = false>(options: Options<PutApiManagerSeatsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiManagerSeatsByIdResponses, PutApiManagerSeatsByIdErrors, ThrowOnError>({
        responseTransformer: putApiManagerSeatsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/manager/seats/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Confirm email address
 * Confirms a user's email address using the provided token
 */
export const getApiUserConfirmEmail = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserConfirmEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserConfirmEmailResponses, GetApiUserConfirmEmailErrors, ThrowOnError>({
        url: '/api/user/confirm-email',
        ...options
    });
};

/**
 * Get Events
 */
export const getApiUserEvents = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserEventsResponses, GetApiUserEventsErrors, ThrowOnError>({
        responseTransformer: getApiUserEventsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/events',
        ...options
    });
};

/**
 * Get Available Reservations
 */
export const getApiUserEventsAvailableReservationsByEventId = <ThrowOnError extends boolean = false>(options: Options<GetApiUserEventsAvailableReservationsByEventIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUserEventsAvailableReservationsByEventIdResponses, GetApiUserEventsAvailableReservationsByEventIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/events/available-reservations/{eventId}',
        ...options
    });
};

/**
 * Get Available Seats
 */
export const getApiUserEventsAvailableSeatsByEventId = <ThrowOnError extends boolean = false>(options: Options<GetApiUserEventsAvailableSeatsByEventIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUserEventsAvailableSeatsByEventIdResponses, GetApiUserEventsAvailableSeatsByEventIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/events/available-seats/{eventId}',
        ...options
    });
};

/**
 * Get My Reservations
 */
export const getApiUserReservations = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserReservationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUserReservationsResponses, GetApiUserReservationsErrors, ThrowOnError>({
        responseTransformer: getApiUserReservationsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/reservations',
        ...options
    });
};

/**
 * Create Reservation
 */
export const postApiUserReservations = <ThrowOnError extends boolean = false>(options: Options<PostApiUserReservationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiUserReservationsResponses, PostApiUserReservationsErrors, ThrowOnError>({
        responseTransformer: postApiUserReservationsResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/reservations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Reservation
 */
export const deleteApiUserReservationsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUserReservationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiUserReservationsByIdResponses, DeleteApiUserReservationsByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/reservations/{id}',
        ...options
    });
};

/**
 * Get My Reservation By Id
 */
export const getApiUserReservationsById = <ThrowOnError extends boolean = false>(options: Options<GetApiUserReservationsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUserReservationsByIdResponses, GetApiUserReservationsByIdErrors, ThrowOnError>({
        responseTransformer: getApiUserReservationsByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user/reservations/{id}',
        ...options
    });
};

/**
 * Create User
 */
export const postApiUsersAdmin = <ThrowOnError extends boolean = false>(options: Options<PostApiUsersAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiUsersAdminResponses, PostApiUsersAdminErrors, ThrowOnError>({
        responseTransformer: postApiUsersAdminResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/admin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Available Roles
 */
export const getApiUsersAdminRoles = <ThrowOnError extends boolean = false>(options?: Options<GetApiUsersAdminRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUsersAdminRolesResponses, GetApiUsersAdminRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/admin/roles',
        ...options
    });
};

/**
 * Delete User
 */
export const deleteApiUsersAdminById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiUsersAdminByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiUsersAdminByIdResponses, DeleteApiUsersAdminByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/admin/{id}',
        ...options
    });
};

/**
 * Get User By Id
 */
export const getApiUsersAdminById = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersAdminByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiUsersAdminByIdResponses, GetApiUsersAdminByIdErrors, ThrowOnError>({
        responseTransformer: getApiUsersAdminByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/admin/{id}',
        ...options
    });
};

/**
 * Update User
 */
export const putApiUsersAdminById = <ThrowOnError extends boolean = false>(options: Options<PutApiUsersAdminByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiUsersAdminByIdResponses, PutApiUsersAdminByIdErrors, ThrowOnError>({
        responseTransformer: putApiUsersAdminByIdResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/admin/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Users
 */
export const getApiUsersManager = <ThrowOnError extends boolean = false>(options?: Options<GetApiUsersManagerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiUsersManagerResponses, GetApiUsersManagerErrors, ThrowOnError>({
        responseTransformer: getApiUsersManagerResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/manager',
        ...options
    });
};

/**
 * Update Current User Profile
 */
export const putApiUsersMe = <ThrowOnError extends boolean = false>(options: Options<PutApiUsersMeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiUsersMeResponses, PutApiUsersMeErrors, ThrowOnError>({
        responseTransformer: putApiUsersMeResponseTransformer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};