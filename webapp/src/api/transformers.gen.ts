// This file is auto-generated by @hey-api/openapi-ts

import type { GetApiManagerEventlocationsResponse, PostApiManagerEventlocationsResponse, PutApiManagerEventlocationsByIdResponse, GetApiManagerEventsResponse, PostApiManagerEventsResponse, PutApiManagerEventsByIdResponse, GetApiManagerReservationsResponse, PostApiManagerReservationsResponse, GetApiManagerReservationsByIdResponse, PutApiManagerReservationsByIdResponse, GetApiManagerSeatsResponse, PostApiManagerSeatsResponse, GetApiManagerSeatsByIdResponse, PutApiManagerSeatsByIdResponse, GetApiUserEventsResponse, GetApiUserReservationsResponse, PostApiUserReservationsResponse, GetApiUserReservationsByIdResponse, GetApiUsersResponse } from './types.gen';

const userDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    return data;
};

const seatDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.locationId) {
        data.locationId = BigInt(data.locationId.toString());
    }
    return data;
};

const eventLocationResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.manager) {
        data.manager = userDtoSchemaResponseTransformer(data.manager);
    }
    if (data.seats) {
        data.seats = data.seats.map((item: any) => {
            return seatDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getApiManagerEventlocationsResponseTransformer = async (data: any): Promise<GetApiManagerEventlocationsResponse> => {
    data = data.map((item: any) => {
        return eventLocationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerEventlocationsResponseTransformer = async (data: any): Promise<PostApiManagerEventlocationsResponse> => {
    data = eventLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerEventlocationsByIdResponseTransformer = async (data: any): Promise<PutApiManagerEventlocationsByIdResponse> => {
    data = eventLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

const localDateTimeSchemaResponseTransformer = (data: any) => {
    data = new Date(data);
    return data;
};

const userDto1SchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    return data;
};

const eventUserAllowancesDtoSchemaResponseTransformer = (data: any) => {
    if (data.eventId) {
        data.eventId = BigInt(data.eventId.toString());
    }
    if (data.userId) {
        data.userId = BigInt(data.userId.toString());
    }
    return data;
};

const eventResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.startTime) {
        data.startTime = localDateTimeSchemaResponseTransformer(data.startTime);
    }
    if (data.endTime) {
        data.endTime = localDateTimeSchemaResponseTransformer(data.endTime);
    }
    if (data.bookingDeadline) {
        data.bookingDeadline = localDateTimeSchemaResponseTransformer(data.bookingDeadline);
    }
    if (data.location) {
        data.location = eventLocationResponseDtoSchemaResponseTransformer(data.location);
    }
    if (data.manager) {
        data.manager = userDto1SchemaResponseTransformer(data.manager);
    }
    if (data.eventUserAllowances) {
        data.eventUserAllowances = data.eventUserAllowances.map((item: any) => {
            return eventUserAllowancesDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getApiManagerEventsResponseTransformer = async (data: any): Promise<GetApiManagerEventsResponse> => {
    data = data.map((item: any) => {
        return eventResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerEventsResponseTransformer = async (data: any): Promise<PostApiManagerEventsResponse> => {
    data = eventResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerEventsByIdResponseTransformer = async (data: any): Promise<PutApiManagerEventsByIdResponse> => {
    data = eventResponseDtoSchemaResponseTransformer(data);
    return data;
};

const seatDto1SchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.locationId) {
        data.locationId = BigInt(data.locationId.toString());
    }
    return data;
};

const reservationResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.user) {
        data.user = userDtoSchemaResponseTransformer(data.user);
    }
    if (data.event) {
        data.event = eventResponseDtoSchemaResponseTransformer(data.event);
    }
    if (data.seat) {
        data.seat = seatDto1SchemaResponseTransformer(data.seat);
    }
    if (data.reservationDateTime) {
        data.reservationDateTime = localDateTimeSchemaResponseTransformer(data.reservationDateTime);
    }
    return data;
};

export const getApiManagerReservationsResponseTransformer = async (data: any): Promise<GetApiManagerReservationsResponse> => {
    data = data.map((item: any) => {
        return reservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerReservationsResponseTransformer = async (data: any): Promise<PostApiManagerReservationsResponse> => {
    data = reservationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiManagerReservationsByIdResponseTransformer = async (data: any): Promise<GetApiManagerReservationsByIdResponse> => {
    data = reservationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerReservationsByIdResponseTransformer = async (data: any): Promise<PutApiManagerReservationsByIdResponse> => {
    data = reservationResponseDtoSchemaResponseTransformer(data);
    return data;
};

const seatResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.location) {
        data.location = eventLocationResponseDtoSchemaResponseTransformer(data.location);
    }
    return data;
};

export const getApiManagerSeatsResponseTransformer = async (data: any): Promise<GetApiManagerSeatsResponse> => {
    data = data.map((item: any) => {
        return seatResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerSeatsResponseTransformer = async (data: any): Promise<PostApiManagerSeatsResponse> => {
    data = seatResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiManagerSeatsByIdResponseTransformer = async (data: any): Promise<GetApiManagerSeatsByIdResponse> => {
    data = seatResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerSeatsByIdResponseTransformer = async (data: any): Promise<PutApiManagerSeatsByIdResponse> => {
    data = seatResponseDtoSchemaResponseTransformer(data);
    return data;
};

const eventLocationResponseDto1SchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.manager) {
        data.manager = userDtoSchemaResponseTransformer(data.manager);
    }
    if (data.seats) {
        data.seats = data.seats.map((item: any) => {
            return seatDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

const eventResponseDto1SchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.startTime) {
        data.startTime = localDateTimeSchemaResponseTransformer(data.startTime);
    }
    if (data.endTime) {
        data.endTime = localDateTimeSchemaResponseTransformer(data.endTime);
    }
    if (data.bookingDeadline) {
        data.bookingDeadline = localDateTimeSchemaResponseTransformer(data.bookingDeadline);
    }
    if (data.location) {
        data.location = eventLocationResponseDto1SchemaResponseTransformer(data.location);
    }
    return data;
};

export const getApiUserEventsResponseTransformer = async (data: any): Promise<GetApiUserEventsResponse> => {
    data = data.map((item: any) => {
        return eventResponseDto1SchemaResponseTransformer(item);
    });
    return data;
};

const reservationResponseDto1SchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.userId) {
        data.userId = BigInt(data.userId.toString());
    }
    if (data.eventId) {
        data.eventId = BigInt(data.eventId.toString());
    }
    if (data.seat) {
        data.seat = seatDto1SchemaResponseTransformer(data.seat);
    }
    if (data.reservationDateTime) {
        data.reservationDateTime = localDateTimeSchemaResponseTransformer(data.reservationDateTime);
    }
    return data;
};

export const getApiUserReservationsResponseTransformer = async (data: any): Promise<GetApiUserReservationsResponse> => {
    data = data.map((item: any) => {
        return reservationResponseDto1SchemaResponseTransformer(item);
    });
    return data;
};

export const postApiUserReservationsResponseTransformer = async (data: any): Promise<PostApiUserReservationsResponse> => {
    data = data.map((item: any) => {
        return reservationResponseDto1SchemaResponseTransformer(item);
    });
    return data;
};

export const getApiUserReservationsByIdResponseTransformer = async (data: any): Promise<GetApiUserReservationsByIdResponse> => {
    data = reservationResponseDto1SchemaResponseTransformer(data);
    return data;
};

const limitedUserDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    return data;
};

export const getApiUsersResponseTransformer = async (data: any): Promise<GetApiUsersResponse> => {
    data = data.map((item: any) => {
        return limitedUserDtoSchemaResponseTransformer(item);
    });
    return data;
};