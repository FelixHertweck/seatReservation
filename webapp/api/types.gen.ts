// This file is auto-generated by @hey-api/openapi-ts

export type AdminUserCreationDto = {
    username: string;
    email?: string;
    password: string;
    firstname: string;
    lastname: string;
    roles?: Array<string>;
    tags?: Array<string>;
};

export type AdminUserUpdateDto = {
    email?: string;
    firstname?: string;
    lastname?: string;
    password?: string;
    tags?: Array<string>;
    roles?: Array<string>;
};

export type BlockSeatsRequestDto = {
    eventId?: bigint;
    seatIds?: Array<bigint>;
};

export type EventLocationRequestDto = {
    name: string;
    address: string;
    capacity: number;
};

export type EventLocationResponseDto = {
    id?: bigint;
    name?: string;
    address?: string;
    capacity?: number;
    manager?: LimitedUserInfoDto;
    seats?: Array<SeatDto>;
};

export type EventLocationWithStatusDto = {
    id?: bigint;
    name?: string;
    address?: string;
    capacity?: number;
    manager?: LimitedUserInfoDto;
    seats?: Array<SeatWithStatusDto>;
};

export type EventRequestDto = {
    name: string;
    description: string;
    startTime: LocalDateTime;
    endTime: LocalDateTime;
    bookingDeadline: LocalDateTime;
    eventLocationId: bigint;
};

export type EventResponseDto = {
    id?: bigint;
    name?: string;
    description?: string;
    startTime?: LocalDateTime;
    endTime?: LocalDateTime;
    bookingDeadline?: LocalDateTime;
    location?: EventLocationWithStatusDto;
    reservationsAllowed?: number;
};

export type EventUserAllowanceUpdateDto = {
    id: bigint;
    eventId: bigint;
    userId: bigint;
    reservationsAllowedCount: number;
};

export type EventUserAllowancesCreateDto = {
    eventId: bigint;
    userIds: Array<bigint>;
    reservationsAllowedCount: number;
};

export type EventUserAllowancesResponseDto = {
    id?: bigint;
    eventId?: bigint;
    userId?: bigint;
    reservationsAllowedCount?: number;
};

export type ImportEventLocationDto = {
    name: string;
    address: string;
    capacity: number;
    seats?: Array<ImportSeatDto>;
};

export type ImportSeatDto = {
    seatNumber: string;
    xCoordinate: number;
    yCoordinate: number;
};

export type LimitedUserInfoDto = {
    id?: bigint;
    username?: string;
    tags?: Array<string>;
};

export type LocalDateTime = Date;

export type LoginRequestDto = {
    identifier: string;
    password: string;
};

export type ManagerEventResponseDto = {
    id?: bigint;
    name?: string;
    description?: string;
    startTime?: LocalDateTime;
    endTime?: LocalDateTime;
    bookingDeadline?: LocalDateTime;
    eventLocation?: EventLocationResponseDto;
    managerId?: bigint;
    eventUserAllowancesIds?: Array<bigint>;
};

export type ManagerReservationRequestDto = {
    eventId: bigint;
    userId: bigint;
    seatIds: Array<bigint>;
    deductAllowance?: boolean;
};

export type ManagerReservationResponseDto = {
    id?: bigint;
    user?: UserDto;
    eventId?: bigint;
    seat?: SeatDto;
    reservationDateTime?: LocalDateTime;
};

export type RegisterRequestDto = {
    username: string;
    firstname: string;
    lastname: string;
    email: string;
    password: string;
};

export type ReservationResponseDto = {
    id?: bigint;
    userId?: bigint;
    eventId?: bigint;
    seat?: SeatDto;
    reservationDateTime?: LocalDateTime;
};

export const ReservationStatus = {
    RESERVED: 'RESERVED',
    BLOCKED: 'BLOCKED'
} as const;

export type ReservationStatus = typeof ReservationStatus[keyof typeof ReservationStatus];

export type ReservationsRequestDto = {
    eventId: bigint;
    seatIds: Array<bigint>;
};

export type SeatDto = {
    id?: bigint;
    seatNumber?: string;
    locationId?: bigint;
    xCoordinate?: number;
    yCoordinate?: number;
    status?: ReservationStatus;
};

export type SeatRequestDto = {
    seatNumber: string;
    eventLocationId: bigint;
    xCoordinate: number;
    yCoordinate: number;
};

export type SeatWithStatusDto = {
    id?: bigint;
    seatNumber?: string;
    xCoordinate?: number;
    yCoordinate?: number;
    status?: ReservationStatus;
};

export type UserDto = {
    id?: bigint;
    username?: string;
    firstname?: string;
    lastname?: string;
    email?: string;
    emailVerified?: boolean;
    roles?: Array<string>;
    tags?: Array<string>;
};

export type UserProfileUpdateDto = {
    email?: string;
    firstname?: string;
    lastname?: string;
    password?: string;
    tags?: Array<string>;
};

export type PostApiAuthLoginData = {
    body: LoginRequestDto;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type PostApiAuthLoginErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized: Invalid credentials
     */
    401: unknown;
};

export type PostApiAuthLoginResponses = {
    /**
     * Login successful, JWT cookie set
     */
    200: unknown;
};

export type PostApiAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type PostApiAuthLogoutResponses = {
    /**
     * Logout successful, JWT cookie cleared
     */
    200: unknown;
};

export type PostApiAuthRegisterData = {
    body: RegisterRequestDto;
    path?: never;
    query?: never;
    url: '/api/auth/register';
};

export type PostApiAuthRegisterErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Conflict: User with this username already exists
     */
    409: unknown;
};

export type PostApiAuthRegisterResponses = {
    /**
     * Registration successful, JWT cookie set
     */
    200: unknown;
};

export type GetApiManagerEventlocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/manager/eventlocations';
};

export type GetApiManagerEventlocationsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
};

export type GetApiManagerEventlocationsResponses = {
    /**
     * OK
     */
    200: Array<EventLocationResponseDto>;
};

export type GetApiManagerEventlocationsResponse = GetApiManagerEventlocationsResponses[keyof GetApiManagerEventlocationsResponses];

export type PostApiManagerEventlocationsData = {
    body: EventLocationRequestDto;
    path?: never;
    query?: never;
    url: '/api/manager/eventlocations';
};

export type PostApiManagerEventlocationsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Conflict: Event location with this name already exists
     */
    409: unknown;
};

export type PostApiManagerEventlocationsResponses = {
    /**
     * OK
     */
    200: EventLocationResponseDto;
};

export type PostApiManagerEventlocationsResponse = PostApiManagerEventlocationsResponses[keyof PostApiManagerEventlocationsResponses];

export type PostApiManagerEventlocationsImportData = {
    body: ImportEventLocationDto;
    path?: never;
    query?: never;
    url: '/api/manager/eventlocations/import';
};

export type PostApiManagerEventlocationsImportErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Conflict: Event location with this name already exists
     */
    409: unknown;
};

export type PostApiManagerEventlocationsImportResponses = {
    /**
     * OK
     */
    200: EventLocationResponseDto;
};

export type PostApiManagerEventlocationsImportResponse = PostApiManagerEventlocationsImportResponses[keyof PostApiManagerEventlocationsImportResponses];

export type PostApiManagerEventlocationsImportByIdData = {
    body: Array<ImportSeatDto>;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/eventlocations/import/{id}';
};

export type PostApiManagerEventlocationsImportByIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event location with specified ID not found
     */
    404: unknown;
};

export type PostApiManagerEventlocationsImportByIdResponses = {
    /**
     * OK
     */
    200: EventLocationResponseDto;
};

export type PostApiManagerEventlocationsImportByIdResponse = PostApiManagerEventlocationsImportByIdResponses[keyof PostApiManagerEventlocationsImportByIdResponses];

export type DeleteApiManagerEventlocationsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/eventlocations/{id}';
};

export type DeleteApiManagerEventlocationsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event location with specified ID not found
     */
    404: unknown;
};

export type DeleteApiManagerEventlocationsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Event location deleted successfully
     */
    204: void;
};

export type DeleteApiManagerEventlocationsByIdResponse = DeleteApiManagerEventlocationsByIdResponses[keyof DeleteApiManagerEventlocationsByIdResponses];

export type PutApiManagerEventlocationsByIdData = {
    body: EventLocationRequestDto;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/eventlocations/{id}';
};

export type PutApiManagerEventlocationsByIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event location with specified ID not found
     */
    404: unknown;
    /**
     * Conflict: Event location with this name already exists
     */
    409: unknown;
};

export type PutApiManagerEventlocationsByIdResponses = {
    /**
     * OK
     */
    200: EventLocationResponseDto;
};

export type PutApiManagerEventlocationsByIdResponse = PutApiManagerEventlocationsByIdResponses[keyof PutApiManagerEventlocationsByIdResponses];

export type GetApiManagerEventsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/manager/events';
};

export type GetApiManagerEventsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
};

export type GetApiManagerEventsResponses = {
    /**
     * OK
     */
    200: Array<ManagerEventResponseDto>;
};

export type GetApiManagerEventsResponse = GetApiManagerEventsResponses[keyof GetApiManagerEventsResponses];

export type PostApiManagerEventsData = {
    body: EventRequestDto;
    path?: never;
    query?: never;
    url: '/api/manager/events';
};

export type PostApiManagerEventsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event location not found
     */
    404: unknown;
    /**
     * Conflict: Event with this name already exists in this event location
     */
    409: unknown;
};

export type PostApiManagerEventsResponses = {
    /**
     * OK
     */
    200: ManagerEventResponseDto;
};

export type PostApiManagerEventsResponse = PostApiManagerEventsResponses[keyof PostApiManagerEventsResponses];

export type DeleteApiManagerEventsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/events/{id}';
};

export type DeleteApiManagerEventsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event with specified ID not found for the current manager
     */
    404: unknown;
};

export type DeleteApiManagerEventsByIdResponses = {
    /**
     * Event deleted
     */
    204: void;
};

export type DeleteApiManagerEventsByIdResponse = DeleteApiManagerEventsByIdResponses[keyof DeleteApiManagerEventsByIdResponses];

export type GetApiManagerEventsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/events/{id}';
};

export type GetApiManagerEventsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event with specified ID not found for the current manager
     */
    404: unknown;
};

export type GetApiManagerEventsByIdResponses = {
    /**
     * OK
     */
    200: ManagerEventResponseDto;
};

export type GetApiManagerEventsByIdResponse = GetApiManagerEventsByIdResponses[keyof GetApiManagerEventsByIdResponses];

export type PutApiManagerEventsByIdData = {
    body: EventRequestDto;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/events/{id}';
};

export type PutApiManagerEventsByIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event or event location not found
     */
    404: unknown;
    /**
     * Conflict: Event with this name already exists in this event location
     */
    409: unknown;
};

export type PutApiManagerEventsByIdResponses = {
    /**
     * OK
     */
    200: ManagerEventResponseDto;
};

export type PutApiManagerEventsByIdResponse = PutApiManagerEventsByIdResponses[keyof PutApiManagerEventsByIdResponses];

export type GetApiManagerReservationAllowanceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/manager/reservationAllowance';
};

export type GetApiManagerReservationAllowanceErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
};

export type GetApiManagerReservationAllowanceResponses = {
    /**
     * List of reservation allowances retrieved successfully
     */
    200: Array<EventUserAllowancesResponseDto>;
};

export type GetApiManagerReservationAllowanceResponse = GetApiManagerReservationAllowanceResponses[keyof GetApiManagerReservationAllowanceResponses];

export type PostApiManagerReservationAllowanceData = {
    body: EventUserAllowancesCreateDto;
    path?: never;
    query?: never;
    url: '/api/manager/reservationAllowance';
};

export type PostApiManagerReservationAllowanceErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event or user not found
     */
    404: unknown;
    /**
     * Conflict: Allowance already exists for this user and event
     */
    409: unknown;
};

export type PostApiManagerReservationAllowanceResponses = {
    /**
     * OK
     */
    200: Array<EventUserAllowancesResponseDto>;
};

export type PostApiManagerReservationAllowanceResponse = PostApiManagerReservationAllowanceResponses[keyof PostApiManagerReservationAllowanceResponses];

export type PutApiManagerReservationAllowanceData = {
    body: EventUserAllowanceUpdateDto;
    path?: never;
    query?: never;
    url: '/api/manager/reservationAllowance';
};

export type PutApiManagerReservationAllowanceErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Allowance with specified ID not found
     */
    404: unknown;
    /**
     * Conflict: Allowance already exists for this user and event
     */
    409: unknown;
};

export type PutApiManagerReservationAllowanceResponses = {
    /**
     * OK
     */
    200: EventUserAllowancesResponseDto;
};

export type PutApiManagerReservationAllowanceResponse = PutApiManagerReservationAllowanceResponses[keyof PutApiManagerReservationAllowanceResponses];

export type GetApiManagerReservationAllowanceEventByEventIdData = {
    body?: never;
    path: {
        eventId: bigint;
    };
    query?: never;
    url: '/api/manager/reservationAllowance/event/{eventId}';
};

export type GetApiManagerReservationAllowanceEventByEventIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event with specified ID not found
     */
    404: unknown;
};

export type GetApiManagerReservationAllowanceEventByEventIdResponses = {
    /**
     * List of reservation allowances for a specific event retrieved successfully
     */
    200: Array<EventUserAllowancesResponseDto>;
};

export type GetApiManagerReservationAllowanceEventByEventIdResponse = GetApiManagerReservationAllowanceEventByEventIdResponses[keyof GetApiManagerReservationAllowanceEventByEventIdResponses];

export type DeleteApiManagerReservationAllowanceByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/reservationAllowance/{id}';
};

export type DeleteApiManagerReservationAllowanceByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Allowance with specified ID not found
     */
    404: unknown;
};

export type DeleteApiManagerReservationAllowanceByIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteApiManagerReservationAllowanceByIdResponse = DeleteApiManagerReservationAllowanceByIdResponses[keyof DeleteApiManagerReservationAllowanceByIdResponses];

export type GetApiManagerReservationAllowanceByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/reservationAllowance/{id}';
};

export type GetApiManagerReservationAllowanceByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Allowance with specified ID not found
     */
    404: unknown;
};

export type GetApiManagerReservationAllowanceByIdResponses = {
    /**
     * Reservation allowance retrieved successfully
     */
    200: EventUserAllowancesResponseDto;
};

export type GetApiManagerReservationAllowanceByIdResponse = GetApiManagerReservationAllowanceByIdResponses[keyof GetApiManagerReservationAllowanceByIdResponses];

export type GetApiManagerReservationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/manager/reservations';
};

export type GetApiManagerReservationsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
};

export type GetApiManagerReservationsResponses = {
    /**
     * OK
     */
    200: Array<ManagerReservationResponseDto>;
};

export type GetApiManagerReservationsResponse = GetApiManagerReservationsResponses[keyof GetApiManagerReservationsResponses];

export type PostApiManagerReservationsData = {
    body: ManagerReservationRequestDto;
    path?: never;
    query?: never;
    url: '/api/manager/reservations';
};

export type PostApiManagerReservationsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event, user or seat not found
     */
    404: unknown;
    /**
     * Conflict: Seat already reserved or event booking closed
     */
    409: unknown;
};

export type PostApiManagerReservationsResponses = {
    /**
     * OK
     */
    200: Array<ManagerReservationResponseDto>;
};

export type PostApiManagerReservationsResponse = PostApiManagerReservationsResponses[keyof PostApiManagerReservationsResponses];

export type PostApiManagerReservationsBlockData = {
    body: BlockSeatsRequestDto;
    path?: never;
    query?: never;
    url: '/api/manager/reservations/block';
};

export type PostApiManagerReservationsBlockErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event or seat not found
     */
    404: unknown;
    /**
     * Conflict: Seat already blocked
     */
    409: unknown;
};

export type PostApiManagerReservationsBlockResponses = {
    /**
     * Seats blocked successfully
     */
    200: Array<ManagerReservationResponseDto>;
};

export type PostApiManagerReservationsBlockResponse = PostApiManagerReservationsBlockResponses[keyof PostApiManagerReservationsBlockResponses];

export type GetApiManagerReservationsEventByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/reservations/event/{id}';
};

export type GetApiManagerReservationsEventByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event with specified ID not found for the current manager
     */
    404: unknown;
};

export type GetApiManagerReservationsEventByIdResponses = {
    /**
     * OK
     */
    200: Array<ManagerReservationResponseDto>;
};

export type GetApiManagerReservationsEventByIdResponse = GetApiManagerReservationsEventByIdResponses[keyof GetApiManagerReservationsEventByIdResponses];

export type GetApiManagerReservationsExportByEventIdCsvData = {
    body?: never;
    path: {
        eventId: bigint;
    };
    query?: never;
    url: '/api/manager/reservations/export/{eventId}/csv';
};

export type GetApiManagerReservationsExportByEventIdCsvErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden - User not authorized
     */
    403: unknown;
    /**
     * Not Found - Event not found
     */
    404: unknown;
    /**
     * Internal Server Error during CSV export
     */
    500: unknown;
};

export type GetApiManagerReservationsExportByEventIdCsvResponses = {
    /**
     * CSV export of reservations for a specific event
     */
    200: unknown;
};

export type DeleteApiManagerReservationsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/reservations/{id}';
};

export type DeleteApiManagerReservationsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Reservation with specified ID not found for the current manager
     */
    404: unknown;
};

export type DeleteApiManagerReservationsByIdResponses = {
    /**
     * Reservation deleted successfully
     */
    204: void;
};

export type DeleteApiManagerReservationsByIdResponse = DeleteApiManagerReservationsByIdResponses[keyof DeleteApiManagerReservationsByIdResponses];

export type GetApiManagerReservationsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/reservations/{id}';
};

export type GetApiManagerReservationsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Reservation with specified ID not found for the current manager
     */
    404: unknown;
};

export type GetApiManagerReservationsByIdResponses = {
    /**
     * OK
     */
    200: ManagerReservationResponseDto;
};

export type GetApiManagerReservationsByIdResponse = GetApiManagerReservationsByIdResponses[keyof GetApiManagerReservationsByIdResponses];

export type GetApiManagerSeatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/manager/seats';
};

export type GetApiManagerSeatsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
};

export type GetApiManagerSeatsResponses = {
    /**
     * OK
     */
    200: Array<SeatDto>;
};

export type GetApiManagerSeatsResponse = GetApiManagerSeatsResponses[keyof GetApiManagerSeatsResponses];

export type PostApiManagerSeatsData = {
    body: SeatRequestDto;
    path?: never;
    query?: never;
    url: '/api/manager/seats';
};

export type PostApiManagerSeatsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event location not found
     */
    404: unknown;
    /**
     * Conflict: Seat with this row and number already exists in this event location
     */
    409: unknown;
};

export type PostApiManagerSeatsResponses = {
    /**
     * OK
     */
    200: SeatDto;
};

export type PostApiManagerSeatsResponse = PostApiManagerSeatsResponses[keyof PostApiManagerSeatsResponses];

export type DeleteApiManagerSeatsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/seats/{id}';
};

export type DeleteApiManagerSeatsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Seat with specified ID not found for the current manager
     */
    404: unknown;
};

export type DeleteApiManagerSeatsByIdResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Seat deleted successfully
     */
    204: void;
};

export type DeleteApiManagerSeatsByIdResponse = DeleteApiManagerSeatsByIdResponses[keyof DeleteApiManagerSeatsByIdResponses];

export type GetApiManagerSeatsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/seats/{id}';
};

export type GetApiManagerSeatsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Seat with specified ID not found for the current manager
     */
    404: unknown;
};

export type GetApiManagerSeatsByIdResponses = {
    /**
     * OK
     */
    200: SeatDto;
};

export type GetApiManagerSeatsByIdResponse = GetApiManagerSeatsByIdResponses[keyof GetApiManagerSeatsByIdResponses];

export type PutApiManagerSeatsByIdData = {
    body: SeatRequestDto;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/manager/seats/{id}';
};

export type PutApiManagerSeatsByIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only MANAGER or ADMIN roles can access this resource
     */
    403: unknown;
    /**
     * Not Found: Seat with specified ID not found for the current manager
     */
    404: unknown;
    /**
     * Conflict: Seat with this row and number already exists in this event location
     */
    409: unknown;
};

export type PutApiManagerSeatsByIdResponses = {
    /**
     * OK
     */
    200: SeatDto;
};

export type PutApiManagerSeatsByIdResponse = PutApiManagerSeatsByIdResponses[keyof PutApiManagerSeatsByIdResponses];

export type GetApiUserConfirmEmailData = {
    body?: never;
    path?: never;
    query?: {
        id?: bigint;
        token?: string;
    };
    url: '/api/user/confirm-email';
};

export type GetApiUserConfirmEmailErrors = {
    /**
     * Invalid token
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Token not found
     */
    404: unknown;
    /**
     * Token expired
     */
    410: unknown;
};

export type GetApiUserConfirmEmailResponses = {
    /**
     * Email confirmed successfully
     */
    200: unknown;
};

export type GetApiUserEventsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/events';
};

export type GetApiUserEventsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
};

export type GetApiUserEventsResponses = {
    /**
     * OK
     */
    200: Array<EventResponseDto>;
};

export type GetApiUserEventsResponse = GetApiUserEventsResponses[keyof GetApiUserEventsResponses];

export type PostApiUserResendEmailConfirmationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/resend-email-confirmation';
};

export type PostApiUserResendEmailConfirmationErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * User not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: unknown;
};

export type PostApiUserResendEmailConfirmationResponses = {
    /**
     * Email confirmation resent successfully
     */
    204: void;
};

export type PostApiUserResendEmailConfirmationResponse = PostApiUserResendEmailConfirmationResponses[keyof PostApiUserResendEmailConfirmationResponses];

export type GetApiUserReservationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/reservations';
};

export type GetApiUserReservationsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
};

export type GetApiUserReservationsResponses = {
    /**
     * OK
     */
    200: Array<ReservationResponseDto>;
};

export type GetApiUserReservationsResponse = GetApiUserReservationsResponses[keyof GetApiUserReservationsResponses];

export type PostApiUserReservationsData = {
    body: ReservationsRequestDto;
    path?: never;
    query?: never;
    url: '/api/user/reservations';
};

export type PostApiUserReservationsErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
    /**
     * Not Found: Event or seat not found
     */
    404: unknown;
    /**
     * Conflict: Seat already reserved or event booking closed
     */
    409: unknown;
};

export type PostApiUserReservationsResponses = {
    /**
     * OK
     */
    200: Array<ReservationResponseDto>;
};

export type PostApiUserReservationsResponse = PostApiUserReservationsResponses[keyof PostApiUserReservationsResponses];

export type DeleteApiUserReservationsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/user/reservations/{id}';
};

export type DeleteApiUserReservationsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
    /**
     * Not Found: Reservation with specified ID not found for the current user
     */
    404: unknown;
};

export type DeleteApiUserReservationsByIdResponses = {
    /**
     * No Content
     */
    204: void;
};

export type DeleteApiUserReservationsByIdResponse = DeleteApiUserReservationsByIdResponses[keyof DeleteApiUserReservationsByIdResponses];

export type GetApiUserReservationsByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/user/reservations/{id}';
};

export type GetApiUserReservationsByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
    /**
     * Not Found: Reservation with specified ID not found for the current user
     */
    404: unknown;
};

export type GetApiUserReservationsByIdResponses = {
    /**
     * OK
     */
    200: ReservationResponseDto;
};

export type GetApiUserReservationsByIdResponse = GetApiUserReservationsByIdResponses[keyof GetApiUserReservationsByIdResponses];

export type GetApiUsersAdminData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/admin';
};

export type GetApiUsersAdminErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only ADMIN role can access this resource
     */
    403: unknown;
};

export type GetApiUsersAdminResponses = {
    /**
     * List of users (admin view) retrieved successfully
     */
    200: Array<UserDto>;
};

export type GetApiUsersAdminResponse = GetApiUsersAdminResponses[keyof GetApiUsersAdminResponses];

export type PostApiUsersAdminData = {
    body: AdminUserCreationDto;
    path?: never;
    query?: never;
    url: '/api/users/admin';
};

export type PostApiUsersAdminErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only ADMIN role can access this resource
     */
    403: unknown;
    /**
     * Conflict: User with this username already exists
     */
    409: unknown;
};

export type PostApiUsersAdminResponses = {
    /**
     * User created successfully
     */
    201: unknown;
};

export type PostApiUsersAdminImportData = {
    body: Array<AdminUserCreationDto>;
    path?: never;
    query?: never;
    url: '/api/users/admin/import';
};

export type PostApiUsersAdminImportErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only ADMIN role can access this resource
     */
    403: unknown;
};

export type PostApiUsersAdminImportResponses = {
    /**
     * Users imported successfully
     */
    200: Array<UserDto>;
};

export type PostApiUsersAdminImportResponse = PostApiUsersAdminImportResponses[keyof PostApiUsersAdminImportResponses];

export type DeleteApiUsersAdminByIdData = {
    body?: never;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/users/admin/{id}';
};

export type DeleteApiUsersAdminByIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only ADMIN role can access this resource
     */
    403: unknown;
    /**
     * Not Found: User with specified ID not found
     */
    404: unknown;
};

export type DeleteApiUsersAdminByIdResponses = {
    /**
     * User deleted successfully
     */
    204: void;
};

export type DeleteApiUsersAdminByIdResponse = DeleteApiUsersAdminByIdResponses[keyof DeleteApiUsersAdminByIdResponses];

export type PutApiUsersAdminByIdData = {
    body: AdminUserUpdateDto;
    path: {
        id: bigint;
    };
    query?: never;
    url: '/api/users/admin/{id}';
};

export type PutApiUsersAdminByIdErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only ADMIN role can access this resource
     */
    403: unknown;
    /**
     * Not Found: User with specified ID not found
     */
    404: unknown;
    /**
     * Conflict: User with this username already exists
     */
    409: unknown;
};

export type PutApiUsersAdminByIdResponses = {
    /**
     * User updated successfully
     */
    200: UserDto;
};

export type PutApiUsersAdminByIdResponse = PutApiUsersAdminByIdResponses[keyof PutApiUsersAdminByIdResponses];

export type GetApiUsersManagerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/manager';
};

export type GetApiUsersManagerErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only ADMIN or MANAGER roles can access this resource
     */
    403: unknown;
};

export type GetApiUsersManagerResponses = {
    /**
     * List of users (limited info) retrieved successfully
     */
    200: Array<LimitedUserInfoDto>;
};

export type GetApiUsersManagerResponse = GetApiUsersManagerResponses[keyof GetApiUsersManagerResponses];

export type GetApiUsersMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/me';
};

export type GetApiUsersMeErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
};

export type GetApiUsersMeResponses = {
    /**
     * Current user profile retrieved successfully
     */
    200: UserDto;
};

export type GetApiUsersMeResponse = GetApiUsersMeResponses[keyof GetApiUsersMeResponses];

export type PutApiUsersMeData = {
    body: UserProfileUpdateDto;
    path?: never;
    query?: never;
    url: '/api/users/me';
};

export type PutApiUsersMeErrors = {
    /**
     * Bad Request
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
    /**
     * Conflict: User with this username already exists
     */
    409: unknown;
};

export type PutApiUsersMeResponses = {
    /**
     * User profile updated successfully
     */
    200: UserDto;
};

export type PutApiUsersMeResponse = PutApiUsersMeResponses[keyof PutApiUsersMeResponses];

export type GetApiUsersRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/roles';
};

export type GetApiUsersRolesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Forbidden: Only authenticated users can access this resource
     */
    403: unknown;
};

export type GetApiUsersRolesResponses = {
    /**
     * List of available roles retrieved successfully
     */
    200: Array<string>;
};

export type GetApiUsersRolesResponse = GetApiUsersRolesResponses[keyof GetApiUsersRolesResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | 'http://0.0.0.0:8080' | (string & {});
};
