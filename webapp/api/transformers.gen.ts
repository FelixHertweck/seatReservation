// This file is auto-generated by @hey-api/openapi-ts

import type { GetApiManagerEventlocationsResponse, PostApiManagerEventlocationsResponse, PostApiManagerEventlocationsImportResponse, PostApiManagerEventlocationsImportByIdResponse, PutApiManagerEventlocationsByIdResponse, GetApiManagerEventsResponse, PostApiManagerEventsResponse, GetApiManagerEventsByIdResponse, PutApiManagerEventsByIdResponse, GetApiManagerReservationAllowanceResponse, PostApiManagerReservationAllowanceResponse, PutApiManagerReservationAllowanceResponse, GetApiManagerReservationAllowanceEventByEventIdResponse, GetApiManagerReservationAllowanceByIdResponse, GetApiManagerReservationsResponse, PostApiManagerReservationsResponse, PostApiManagerReservationsBlockResponse, GetApiManagerReservationsEventByIdResponse, GetApiManagerReservationsByIdResponse, GetApiManagerSeatsResponse, PostApiManagerSeatsResponse, GetApiManagerSeatsByIdResponse, PutApiManagerSeatsByIdResponse, GetApiUserEventsResponse, GetApiUserReservationsResponse, PostApiUserReservationsResponse, GetApiUserReservationsByIdResponse, GetApiUsersAdminResponse, PostApiUsersAdminImportResponse, PutApiUsersAdminByIdResponse, GetApiUsersManagerResponse, GetApiUsersMeResponse, PutApiUsersMeResponse } from './types.gen';

const limitedUserInfoDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    return data;
};

const seatDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.locationId) {
        data.locationId = BigInt(data.locationId.toString());
    }
    return data;
};

const eventLocationResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.manager) {
        data.manager = limitedUserInfoDtoSchemaResponseTransformer(data.manager);
    }
    if (data.seats) {
        data.seats = data.seats.map((item: any) => {
            return seatDtoSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const getApiManagerEventlocationsResponseTransformer = async (data: any): Promise<GetApiManagerEventlocationsResponse> => {
    data = data.map((item: any) => {
        return eventLocationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerEventlocationsResponseTransformer = async (data: any): Promise<PostApiManagerEventlocationsResponse> => {
    data = eventLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const postApiManagerEventlocationsImportResponseTransformer = async (data: any): Promise<PostApiManagerEventlocationsImportResponse> => {
    data = eventLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const postApiManagerEventlocationsImportByIdResponseTransformer = async (data: any): Promise<PostApiManagerEventlocationsImportByIdResponse> => {
    data = eventLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerEventlocationsByIdResponseTransformer = async (data: any): Promise<PutApiManagerEventlocationsByIdResponse> => {
    data = eventLocationResponseDtoSchemaResponseTransformer(data);
    return data;
};

const instantSchemaResponseTransformer = (data: any) => {
    data = new Date(data);
    return data;
};

const seatStatusDtoSchemaResponseTransformer = (data: any) => {
    if (data.seatId) {
        data.seatId = BigInt(data.seatId.toString());
    }
    return data;
};

const detailedEventResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.startTime) {
        data.startTime = instantSchemaResponseTransformer(data.startTime);
    }
    if (data.endTime) {
        data.endTime = instantSchemaResponseTransformer(data.endTime);
    }
    if (data.bookingDeadline) {
        data.bookingDeadline = instantSchemaResponseTransformer(data.bookingDeadline);
    }
    if (data.seatStatuses) {
        data.seatStatuses = data.seatStatuses.map((item: any) => {
            return seatStatusDtoSchemaResponseTransformer(item);
        });
    }
    if (data.eventUserAllowancesIds) {
        data.eventUserAllowancesIds = data.eventUserAllowancesIds.map((item: any) => {
            BigInt(item.toString());
            return item;
        });
    }
    if (data.eventLocationId) {
        data.eventLocationId = BigInt(data.eventLocationId.toString());
    }
    if (data.managerId) {
        data.managerId = BigInt(data.managerId.toString());
    }
    return data;
};

export const getApiManagerEventsResponseTransformer = async (data: any): Promise<GetApiManagerEventsResponse> => {
    data = data.map((item: any) => {
        return detailedEventResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerEventsResponseTransformer = async (data: any): Promise<PostApiManagerEventsResponse> => {
    data = detailedEventResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiManagerEventsByIdResponseTransformer = async (data: any): Promise<GetApiManagerEventsByIdResponse> => {
    data = detailedEventResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerEventsByIdResponseTransformer = async (data: any): Promise<PutApiManagerEventsByIdResponse> => {
    data = detailedEventResponseDtoSchemaResponseTransformer(data);
    return data;
};

const eventUserAllowancesDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.eventId) {
        data.eventId = BigInt(data.eventId.toString());
    }
    if (data.userId) {
        data.userId = BigInt(data.userId.toString());
    }
    return data;
};

export const getApiManagerReservationAllowanceResponseTransformer = async (data: any): Promise<GetApiManagerReservationAllowanceResponse> => {
    data = data.map((item: any) => {
        return eventUserAllowancesDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerReservationAllowanceResponseTransformer = async (data: any): Promise<PostApiManagerReservationAllowanceResponse> => {
    data = data.map((item: any) => {
        return eventUserAllowancesDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const putApiManagerReservationAllowanceResponseTransformer = async (data: any): Promise<PutApiManagerReservationAllowanceResponse> => {
    data = eventUserAllowancesDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiManagerReservationAllowanceEventByEventIdResponseTransformer = async (data: any): Promise<GetApiManagerReservationAllowanceEventByEventIdResponse> => {
    data = data.map((item: any) => {
        return eventUserAllowancesDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getApiManagerReservationAllowanceByIdResponseTransformer = async (data: any): Promise<GetApiManagerReservationAllowanceByIdResponse> => {
    data = eventUserAllowancesDtoSchemaResponseTransformer(data);
    return data;
};

const userDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    return data;
};

const detailedReservationResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.user) {
        data.user = userDtoSchemaResponseTransformer(data.user);
    }
    if (data.eventId) {
        data.eventId = BigInt(data.eventId.toString());
    }
    if (data.seat) {
        data.seat = seatDtoSchemaResponseTransformer(data.seat);
    }
    if (data.reservationDateTime) {
        data.reservationDateTime = instantSchemaResponseTransformer(data.reservationDateTime);
    }
    return data;
};

export const getApiManagerReservationsResponseTransformer = async (data: any): Promise<GetApiManagerReservationsResponse> => {
    data = data.map((item: any) => {
        return detailedReservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerReservationsResponseTransformer = async (data: any): Promise<PostApiManagerReservationsResponse> => {
    data = data.map((item: any) => {
        return detailedReservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerReservationsBlockResponseTransformer = async (data: any): Promise<PostApiManagerReservationsBlockResponse> => {
    data = data.map((item: any) => {
        return detailedReservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getApiManagerReservationsEventByIdResponseTransformer = async (data: any): Promise<GetApiManagerReservationsEventByIdResponse> => {
    data = data.map((item: any) => {
        return detailedReservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getApiManagerReservationsByIdResponseTransformer = async (data: any): Promise<GetApiManagerReservationsByIdResponse> => {
    data = detailedReservationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiManagerSeatsResponseTransformer = async (data: any): Promise<GetApiManagerSeatsResponse> => {
    data = data.map((item: any) => {
        return seatDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiManagerSeatsResponseTransformer = async (data: any): Promise<PostApiManagerSeatsResponse> => {
    data = seatDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiManagerSeatsByIdResponseTransformer = async (data: any): Promise<GetApiManagerSeatsByIdResponse> => {
    data = seatDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiManagerSeatsByIdResponseTransformer = async (data: any): Promise<PutApiManagerSeatsByIdResponse> => {
    data = seatDtoSchemaResponseTransformer(data);
    return data;
};

const eventResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.startTime) {
        data.startTime = instantSchemaResponseTransformer(data.startTime);
    }
    if (data.endTime) {
        data.endTime = instantSchemaResponseTransformer(data.endTime);
    }
    if (data.bookingDeadline) {
        data.bookingDeadline = instantSchemaResponseTransformer(data.bookingDeadline);
    }
    if (data.seatStatuses) {
        data.seatStatuses = data.seatStatuses.map((item: any) => {
            return seatStatusDtoSchemaResponseTransformer(item);
        });
    }
    if (data.location) {
        data.location = eventLocationResponseDtoSchemaResponseTransformer(data.location);
    }
    return data;
};

export const getApiUserEventsResponseTransformer = async (data: any): Promise<GetApiUserEventsResponse> => {
    data = data.map((item: any) => {
        return eventResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

const reservationResponseDtoSchemaResponseTransformer = (data: any) => {
    if (data.id) {
        data.id = BigInt(data.id.toString());
    }
    if (data.userId) {
        data.userId = BigInt(data.userId.toString());
    }
    if (data.eventId) {
        data.eventId = BigInt(data.eventId.toString());
    }
    if (data.seat) {
        data.seat = seatDtoSchemaResponseTransformer(data.seat);
    }
    if (data.reservationDateTime) {
        data.reservationDateTime = instantSchemaResponseTransformer(data.reservationDateTime);
    }
    return data;
};

export const getApiUserReservationsResponseTransformer = async (data: any): Promise<GetApiUserReservationsResponse> => {
    data = data.map((item: any) => {
        return reservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiUserReservationsResponseTransformer = async (data: any): Promise<PostApiUserReservationsResponse> => {
    data = data.map((item: any) => {
        return reservationResponseDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getApiUserReservationsByIdResponseTransformer = async (data: any): Promise<GetApiUserReservationsByIdResponse> => {
    data = reservationResponseDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiUsersAdminResponseTransformer = async (data: any): Promise<GetApiUsersAdminResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const postApiUsersAdminImportResponseTransformer = async (data: any): Promise<PostApiUsersAdminImportResponse> => {
    data = data.map((item: any) => {
        return userDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const putApiUsersAdminByIdResponseTransformer = async (data: any): Promise<PutApiUsersAdminByIdResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

export const getApiUsersManagerResponseTransformer = async (data: any): Promise<GetApiUsersManagerResponse> => {
    data = data.map((item: any) => {
        return limitedUserInfoDtoSchemaResponseTransformer(item);
    });
    return data;
};

export const getApiUsersMeResponseTransformer = async (data: any): Promise<GetApiUsersMeResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};

export const putApiUsersMeResponseTransformer = async (data: any): Promise<PutApiUsersMeResponse> => {
    data = userDtoSchemaResponseTransformer(data);
    return data;
};
