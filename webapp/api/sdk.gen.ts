// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  PostApiAuthLoginData,
  PostApiAuthLoginResponses,
  PostApiAuthLoginErrors,
  GetApiManagerEventlocationsData,
  GetApiManagerEventlocationsResponses,
  GetApiManagerEventlocationsErrors,
  PostApiManagerEventlocationsData,
  PostApiManagerEventlocationsResponses,
  PostApiManagerEventlocationsErrors,
  PostApiManagerEventlocationsRegisterData,
  PostApiManagerEventlocationsRegisterResponses,
  PostApiManagerEventlocationsRegisterErrors,
  DeleteApiManagerEventlocationsByIdData,
  DeleteApiManagerEventlocationsByIdResponses,
  DeleteApiManagerEventlocationsByIdErrors,
  PutApiManagerEventlocationsByIdData,
  PutApiManagerEventlocationsByIdResponses,
  PutApiManagerEventlocationsByIdErrors,
  GetApiManagerEventsData,
  GetApiManagerEventsResponses,
  GetApiManagerEventsErrors,
  PostApiManagerEventsData,
  PostApiManagerEventsResponses,
  PostApiManagerEventsErrors,
  DeleteApiManagerEventsByIdData,
  DeleteApiManagerEventsByIdResponses,
  DeleteApiManagerEventsByIdErrors,
  GetApiManagerEventsByIdData,
  GetApiManagerEventsByIdResponses,
  GetApiManagerEventsByIdErrors,
  PutApiManagerEventsByIdData,
  PutApiManagerEventsByIdResponses,
  PutApiManagerEventsByIdErrors,
  GetApiManagerReservationAllowanceData,
  GetApiManagerReservationAllowanceResponses,
  GetApiManagerReservationAllowanceErrors,
  PostApiManagerReservationAllowanceData,
  PostApiManagerReservationAllowanceResponses,
  PostApiManagerReservationAllowanceErrors,
  GetApiManagerReservationAllowanceEventByEventIdData,
  GetApiManagerReservationAllowanceEventByEventIdResponses,
  GetApiManagerReservationAllowanceEventByEventIdErrors,
  DeleteApiManagerReservationAllowanceByIdData,
  DeleteApiManagerReservationAllowanceByIdResponses,
  DeleteApiManagerReservationAllowanceByIdErrors,
  GetApiManagerReservationAllowanceByIdData,
  GetApiManagerReservationAllowanceByIdResponses,
  GetApiManagerReservationAllowanceByIdErrors,
  GetApiManagerReservationsData,
  GetApiManagerReservationsResponses,
  GetApiManagerReservationsErrors,
  PostApiManagerReservationsData,
  PostApiManagerReservationsResponses,
  PostApiManagerReservationsErrors,
  PostApiManagerReservationsBlockData,
  PostApiManagerReservationsBlockResponses,
  PostApiManagerReservationsBlockErrors,
  GetApiManagerReservationsEventByIdData,
  GetApiManagerReservationsEventByIdResponses,
  GetApiManagerReservationsEventByIdErrors,
  DeleteApiManagerReservationsByIdData,
  DeleteApiManagerReservationsByIdResponses,
  DeleteApiManagerReservationsByIdErrors,
  GetApiManagerReservationsByIdData,
  GetApiManagerReservationsByIdResponses,
  GetApiManagerReservationsByIdErrors,
  PutApiManagerReservationsByIdData,
  PutApiManagerReservationsByIdResponses,
  PutApiManagerReservationsByIdErrors,
  GetApiManagerSeatsData,
  GetApiManagerSeatsResponses,
  GetApiManagerSeatsErrors,
  PostApiManagerSeatsData,
  PostApiManagerSeatsResponses,
  PostApiManagerSeatsErrors,
  DeleteApiManagerSeatsByIdData,
  DeleteApiManagerSeatsByIdResponses,
  DeleteApiManagerSeatsByIdErrors,
  GetApiManagerSeatsByIdData,
  GetApiManagerSeatsByIdResponses,
  GetApiManagerSeatsByIdErrors,
  PutApiManagerSeatsByIdData,
  PutApiManagerSeatsByIdResponses,
  PutApiManagerSeatsByIdErrors,
  GetApiUserConfirmEmailData,
  GetApiUserConfirmEmailResponses,
  GetApiUserConfirmEmailErrors,
  GetApiUserEventsData,
  GetApiUserEventsResponses,
  GetApiUserEventsErrors,
  GetApiUserReservationsData,
  GetApiUserReservationsResponses,
  GetApiUserReservationsErrors,
  PostApiUserReservationsData,
  PostApiUserReservationsResponses,
  PostApiUserReservationsErrors,
  DeleteApiUserReservationsByIdData,
  DeleteApiUserReservationsByIdResponses,
  DeleteApiUserReservationsByIdErrors,
  GetApiUserReservationsByIdData,
  GetApiUserReservationsByIdResponses,
  GetApiUserReservationsByIdErrors,
  GetApiUsersAdminData,
  GetApiUsersAdminResponses,
  GetApiUsersAdminErrors,
  PostApiUsersAdminData,
  PostApiUsersAdminResponses,
  PostApiUsersAdminErrors,
  DeleteApiUsersAdminByIdData,
  DeleteApiUsersAdminByIdResponses,
  DeleteApiUsersAdminByIdErrors,
  PutApiUsersAdminByIdData,
  PutApiUsersAdminByIdResponses,
  PutApiUsersAdminByIdErrors,
  GetApiUsersManagerData,
  GetApiUsersManagerResponses,
  GetApiUsersManagerErrors,
  GetApiUsersMeData,
  GetApiUsersMeResponses,
  GetApiUsersMeErrors,
  PutApiUsersMeData,
  PutApiUsersMeResponses,
  PutApiUsersMeErrors,
  GetApiUsersRolesData,
  GetApiUsersRolesResponses,
  GetApiUsersRolesErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  getApiManagerEventlocationsResponseTransformer,
  postApiManagerEventlocationsResponseTransformer,
  postApiManagerEventlocationsRegisterResponseTransformer,
  putApiManagerEventlocationsByIdResponseTransformer,
  getApiManagerEventsResponseTransformer,
  postApiManagerEventsResponseTransformer,
  getApiManagerEventsByIdResponseTransformer,
  putApiManagerEventsByIdResponseTransformer,
  getApiManagerReservationAllowanceResponseTransformer,
  postApiManagerReservationAllowanceResponseTransformer,
  getApiManagerReservationAllowanceEventByEventIdResponseTransformer,
  getApiManagerReservationAllowanceByIdResponseTransformer,
  getApiManagerReservationsResponseTransformer,
  postApiManagerReservationsResponseTransformer,
  getApiManagerReservationsEventByIdResponseTransformer,
  getApiManagerReservationsByIdResponseTransformer,
  putApiManagerReservationsByIdResponseTransformer,
  getApiManagerSeatsResponseTransformer,
  postApiManagerSeatsResponseTransformer,
  getApiManagerSeatsByIdResponseTransformer,
  putApiManagerSeatsByIdResponseTransformer,
  getApiUserEventsResponseTransformer,
  getApiUserReservationsResponseTransformer,
  postApiUserReservationsResponseTransformer,
  getApiUserReservationsByIdResponseTransformer,
  getApiUsersAdminResponseTransformer,
  postApiUsersAdminResponseTransformer,
  putApiUsersAdminByIdResponseTransformer,
  getApiUsersManagerResponseTransformer,
  getApiUsersMeResponseTransformer,
  putApiUsersMeResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Login
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostApiAuthLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiAuthLoginResponses,
    PostApiAuthLoginErrors,
    ThrowOnError
  >({
    url: "/api/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Event Locations By Current Manager
 */
export const getApiManagerEventlocations = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiManagerEventlocationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiManagerEventlocationsResponses,
    GetApiManagerEventlocationsErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerEventlocationsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/eventlocations",
    ...options,
  });
};

/**
 * Create Event Location
 */
export const postApiManagerEventlocations = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiManagerEventlocationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerEventlocationsResponses,
    PostApiManagerEventlocationsErrors,
    ThrowOnError
  >({
    responseTransformer: postApiManagerEventlocationsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/eventlocations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Event Location With Seats
 */
export const postApiManagerEventlocationsRegister = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiManagerEventlocationsRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerEventlocationsRegisterResponses,
    PostApiManagerEventlocationsRegisterErrors,
    ThrowOnError
  >({
    responseTransformer:
      postApiManagerEventlocationsRegisterResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/eventlocations/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Event Location
 */
export const deleteApiManagerEventlocationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiManagerEventlocationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiManagerEventlocationsByIdResponses,
    DeleteApiManagerEventlocationsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/eventlocations/{id}",
    ...options,
  });
};

/**
 * Update Event Location
 */
export const putApiManagerEventlocationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutApiManagerEventlocationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiManagerEventlocationsByIdResponses,
    PutApiManagerEventlocationsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: putApiManagerEventlocationsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/eventlocations/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Events By Current Manager
 */
export const getApiManagerEvents = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiManagerEventsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiManagerEventsResponses,
    GetApiManagerEventsErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerEventsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/events",
    ...options,
  });
};

/**
 * Create Event
 */
export const postApiManagerEvents = <ThrowOnError extends boolean = false>(
  options: Options<PostApiManagerEventsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerEventsResponses,
    PostApiManagerEventsErrors,
    ThrowOnError
  >({
    responseTransformer: postApiManagerEventsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/events",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Event
 */
export const deleteApiManagerEventsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiManagerEventsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiManagerEventsByIdResponses,
    DeleteApiManagerEventsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/events/{id}",
    ...options,
  });
};

/**
 * Get Event By Id
 */
export const getApiManagerEventsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiManagerEventsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiManagerEventsByIdResponses,
    GetApiManagerEventsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerEventsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/events/{id}",
    ...options,
  });
};

/**
 * Update Event
 */
export const putApiManagerEventsById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiManagerEventsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiManagerEventsByIdResponses,
    PutApiManagerEventsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: putApiManagerEventsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/events/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Reservation Allowances
 */
export const getApiManagerReservationAllowance = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetApiManagerReservationAllowanceData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiManagerReservationAllowanceResponses,
    GetApiManagerReservationAllowanceErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerReservationAllowanceResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservationAllowance",
    ...options,
  });
};

/**
 * Set Reservations Allowed For User
 */
export const postApiManagerReservationAllowance = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiManagerReservationAllowanceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerReservationAllowanceResponses,
    PostApiManagerReservationAllowanceErrors,
    ThrowOnError
  >({
    responseTransformer: postApiManagerReservationAllowanceResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservationAllowance",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Reservation Allowances By Event Id
 */
export const getApiManagerReservationAllowanceEventByEventId = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetApiManagerReservationAllowanceEventByEventIdData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiManagerReservationAllowanceEventByEventIdResponses,
    GetApiManagerReservationAllowanceEventByEventIdErrors,
    ThrowOnError
  >({
    responseTransformer:
      getApiManagerReservationAllowanceEventByEventIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservationAllowance/event/{eventId}",
    ...options,
  });
};

/**
 * Delete Reservation Allowance
 */
export const deleteApiManagerReservationAllowanceById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiManagerReservationAllowanceByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiManagerReservationAllowanceByIdResponses,
    DeleteApiManagerReservationAllowanceByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservationAllowance/{id}",
    ...options,
  });
};

/**
 * Get Reservation Allowance By Id
 */
export const getApiManagerReservationAllowanceById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiManagerReservationAllowanceByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiManagerReservationAllowanceByIdResponses,
    GetApiManagerReservationAllowanceByIdErrors,
    ThrowOnError
  >({
    responseTransformer:
      getApiManagerReservationAllowanceByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservationAllowance/{id}",
    ...options,
  });
};

/**
 * Get All Reservations
 */
export const getApiManagerReservations = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiManagerReservationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiManagerReservationsResponses,
    GetApiManagerReservationsErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerReservationsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations",
    ...options,
  });
};

/**
 * Create Reservation
 */
export const postApiManagerReservations = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiManagerReservationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerReservationsResponses,
    PostApiManagerReservationsErrors,
    ThrowOnError
  >({
    responseTransformer: postApiManagerReservationsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Block Seats
 */
export const postApiManagerReservationsBlock = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostApiManagerReservationsBlockData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerReservationsBlockResponses,
    PostApiManagerReservationsBlockErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations/block",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Reservations By Event Id
 */
export const getApiManagerReservationsEventById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiManagerReservationsEventByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiManagerReservationsEventByIdResponses,
    GetApiManagerReservationsEventByIdErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerReservationsEventByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations/event/{id}",
    ...options,
  });
};

/**
 * Delete Reservation
 */
export const deleteApiManagerReservationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiManagerReservationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiManagerReservationsByIdResponses,
    DeleteApiManagerReservationsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations/{id}",
    ...options,
  });
};

/**
 * Get Reservation By Id
 */
export const getApiManagerReservationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiManagerReservationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiManagerReservationsByIdResponses,
    GetApiManagerReservationsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerReservationsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations/{id}",
    ...options,
  });
};

/**
 * Update Reservation
 */
export const putApiManagerReservationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutApiManagerReservationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiManagerReservationsByIdResponses,
    PutApiManagerReservationsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: putApiManagerReservationsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/reservations/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get All Manager Seats
 */
export const getApiManagerSeats = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiManagerSeatsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiManagerSeatsResponses,
    GetApiManagerSeatsErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerSeatsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/seats",
    ...options,
  });
};

/**
 * Create Seat
 */
export const postApiManagerSeats = <ThrowOnError extends boolean = false>(
  options: Options<PostApiManagerSeatsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiManagerSeatsResponses,
    PostApiManagerSeatsErrors,
    ThrowOnError
  >({
    responseTransformer: postApiManagerSeatsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/seats",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Manager Seat
 */
export const deleteApiManagerSeatsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiManagerSeatsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiManagerSeatsByIdResponses,
    DeleteApiManagerSeatsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/seats/{id}",
    ...options,
  });
};

/**
 * Get Manager Seat By Id
 */
export const getApiManagerSeatsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiManagerSeatsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiManagerSeatsByIdResponses,
    GetApiManagerSeatsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: getApiManagerSeatsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/seats/{id}",
    ...options,
  });
};

/**
 * Update Manager Seat
 */
export const putApiManagerSeatsById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiManagerSeatsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiManagerSeatsByIdResponses,
    PutApiManagerSeatsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: putApiManagerSeatsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/manager/seats/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Confirm email address
 * Confirms a user's email address using the provided token
 */
export const getApiUserConfirmEmail = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUserConfirmEmailData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserConfirmEmailResponses,
    GetApiUserConfirmEmailErrors,
    ThrowOnError
  >({
    url: "/api/user/confirm-email",
    ...options,
  });
};

/**
 * Get Events
 */
export const getApiUserEvents = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUserEventsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserEventsResponses,
    GetApiUserEventsErrors,
    ThrowOnError
  >({
    responseTransformer: getApiUserEventsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/user/events",
    ...options,
  });
};

/**
 * Get My Reservations
 */
export const getApiUserReservations = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUserReservationsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserReservationsResponses,
    GetApiUserReservationsErrors,
    ThrowOnError
  >({
    responseTransformer: getApiUserReservationsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/user/reservations",
    ...options,
  });
};

/**
 * Create Reservation
 */
export const postApiUserReservations = <ThrowOnError extends boolean = false>(
  options: Options<PostApiUserReservationsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUserReservationsResponses,
    PostApiUserReservationsErrors,
    ThrowOnError
  >({
    responseTransformer: postApiUserReservationsResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/user/reservations",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Reservation
 */
export const deleteApiUserReservationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteApiUserReservationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUserReservationsByIdResponses,
    DeleteApiUserReservationsByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/user/reservations/{id}",
    ...options,
  });
};

/**
 * Get My Reservation By Id
 */
export const getApiUserReservationsById = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetApiUserReservationsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUserReservationsByIdResponses,
    GetApiUserReservationsByIdErrors,
    ThrowOnError
  >({
    responseTransformer: getApiUserReservationsByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/user/reservations/{id}",
    ...options,
  });
};

/**
 * Get All Users As Admin
 */
export const getApiUsersAdmin = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersAdminData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersAdminResponses,
    GetApiUsersAdminErrors,
    ThrowOnError
  >({
    responseTransformer: getApiUsersAdminResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/admin",
    ...options,
  });
};

/**
 * Create User
 */
export const postApiUsersAdmin = <ThrowOnError extends boolean = false>(
  options: Options<PostApiUsersAdminData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersAdminResponses,
    PostApiUsersAdminErrors,
    ThrowOnError
  >({
    responseTransformer: postApiUsersAdminResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/admin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete User
 */
export const deleteApiUsersAdminById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiUsersAdminByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUsersAdminByIdResponses,
    DeleteApiUsersAdminByIdErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/admin/{id}",
    ...options,
  });
};

/**
 * Update User
 */
export const putApiUsersAdminById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiUsersAdminByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiUsersAdminByIdResponses,
    PutApiUsersAdminByIdErrors,
    ThrowOnError
  >({
    responseTransformer: putApiUsersAdminByIdResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/admin/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get All Users
 */
export const getApiUsersManager = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersManagerData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersManagerResponses,
    GetApiUsersManagerErrors,
    ThrowOnError
  >({
    responseTransformer: getApiUsersManagerResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/manager",
    ...options,
  });
};

/**
 * Get Current User
 */
export const getApiUsersMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersMeResponses,
    GetApiUsersMeErrors,
    ThrowOnError
  >({
    responseTransformer: getApiUsersMeResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me",
    ...options,
  });
};

/**
 * Update Current User Profile
 */
export const putApiUsersMe = <ThrowOnError extends boolean = false>(
  options: Options<PutApiUsersMeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiUsersMeResponses,
    PutApiUsersMeErrors,
    ThrowOnError
  >({
    responseTransformer: putApiUsersMeResponseTransformer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Available Roles
 */
export const getApiUsersRoles = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersRolesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersRolesResponses,
    GetApiUsersRolesErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/users/roles",
    ...options,
  });
};
