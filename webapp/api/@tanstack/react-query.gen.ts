// This file is auto-generated by @hey-api/openapi-ts

import { type Options, postApiAuthLogin, postApiAuthLogout, postApiAuthRegister, getApiManagerEventlocations, postApiManagerEventlocations, postApiManagerEventlocationsImport, postApiManagerEventlocationsImportById, deleteApiManagerEventlocationsById, putApiManagerEventlocationsById, getApiManagerEvents, postApiManagerEvents, deleteApiManagerEventsById, getApiManagerEventsById, putApiManagerEventsById, getApiManagerReservationAllowance, postApiManagerReservationAllowance, putApiManagerReservationAllowance, getApiManagerReservationAllowanceEventByEventId, deleteApiManagerReservationAllowanceById, getApiManagerReservationAllowanceById, getApiManagerReservations, postApiManagerReservations, postApiManagerReservationsBlock, getApiManagerReservationsEventById, deleteApiManagerReservationsById, getApiManagerReservationsById, getApiManagerSeats, postApiManagerSeats, deleteApiManagerSeatsById, getApiManagerSeatsById, putApiManagerSeatsById, getApiUserConfirmEmail, getApiUserEvents, postApiUserResendEmailConfirmation, getApiUserReservations, postApiUserReservations, getApiUserReservationsExportByEventIdCsv, deleteApiUserReservationsById, getApiUserReservationsById, getApiUsersAdmin, postApiUsersAdmin, deleteApiUsersAdminById, putApiUsersAdminById, getApiUsersManager, getApiUsersMe, putApiUsersMe, getApiUsersRoles } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { PostApiAuthLoginData, PostApiAuthLogoutData, PostApiAuthRegisterData, GetApiManagerEventlocationsData, PostApiManagerEventlocationsData, PostApiManagerEventlocationsResponse, PostApiManagerEventlocationsImportData, PostApiManagerEventlocationsImportResponse, PostApiManagerEventlocationsImportByIdData, PostApiManagerEventlocationsImportByIdResponse, DeleteApiManagerEventlocationsByIdData, PutApiManagerEventlocationsByIdData, PutApiManagerEventlocationsByIdResponse, GetApiManagerEventsData, PostApiManagerEventsData, PostApiManagerEventsResponse, DeleteApiManagerEventsByIdData, DeleteApiManagerEventsByIdResponse, GetApiManagerEventsByIdData, PutApiManagerEventsByIdData, PutApiManagerEventsByIdResponse, GetApiManagerReservationAllowanceData, PostApiManagerReservationAllowanceData, PostApiManagerReservationAllowanceResponse, PutApiManagerReservationAllowanceData, PutApiManagerReservationAllowanceResponse, GetApiManagerReservationAllowanceEventByEventIdData, DeleteApiManagerReservationAllowanceByIdData, DeleteApiManagerReservationAllowanceByIdResponse, GetApiManagerReservationAllowanceByIdData, GetApiManagerReservationsData, PostApiManagerReservationsData, PostApiManagerReservationsResponse, PostApiManagerReservationsBlockData, PostApiManagerReservationsBlockResponse, GetApiManagerReservationsEventByIdData, DeleteApiManagerReservationsByIdData, GetApiManagerReservationsByIdData, GetApiManagerSeatsData, PostApiManagerSeatsData, PostApiManagerSeatsResponse, DeleteApiManagerSeatsByIdData, GetApiManagerSeatsByIdData, PutApiManagerSeatsByIdData, PutApiManagerSeatsByIdResponse, GetApiUserConfirmEmailData, GetApiUserEventsData, PostApiUserResendEmailConfirmationData, PostApiUserResendEmailConfirmationResponse, GetApiUserReservationsData, PostApiUserReservationsData, PostApiUserReservationsResponse, GetApiUserReservationsExportByEventIdCsvData, DeleteApiUserReservationsByIdData, DeleteApiUserReservationsByIdResponse, GetApiUserReservationsByIdData, GetApiUsersAdminData, PostApiUsersAdminData, PostApiUsersAdminResponse, DeleteApiUsersAdminByIdData, DeleteApiUsersAdminByIdResponse, PutApiUsersAdminByIdData, PutApiUsersAdminByIdResponse, GetApiUsersManagerData, GetApiUsersMeData, PutApiUsersMeData, PutApiUsersMeResponse, GetApiUsersRolesData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const postApiAuthLoginQueryKey = (options: Options<PostApiAuthLoginData>) => createQueryKey('postApiAuthLogin', options);

/**
 * Login
 */
export const postApiAuthLoginOptions = (options: Options<PostApiAuthLoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthLogin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthLoginQueryKey(options)
    });
};

/**
 * Login
 */
export const postApiAuthLoginMutation = (options?: Partial<Options<PostApiAuthLoginData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthLogin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthLogoutQueryKey = (options?: Options<PostApiAuthLogoutData>) => createQueryKey('postApiAuthLogout', options);

/**
 * Logout
 */
export const postApiAuthLogoutOptions = (options?: Options<PostApiAuthLogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthLogout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthLogoutQueryKey(options)
    });
};

/**
 * Logout
 */
export const postApiAuthLogoutMutation = (options?: Partial<Options<PostApiAuthLogoutData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLogoutData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthLogout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiAuthRegisterQueryKey = (options: Options<PostApiAuthRegisterData>) => createQueryKey('postApiAuthRegister', options);

/**
 * Register
 */
export const postApiAuthRegisterOptions = (options: Options<PostApiAuthRegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiAuthRegister({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiAuthRegisterQueryKey(options)
    });
};

/**
 * Register
 */
export const postApiAuthRegisterMutation = (options?: Partial<Options<PostApiAuthRegisterData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthRegisterData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthRegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiAuthRegister({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerEventlocationsQueryKey = (options?: Options<GetApiManagerEventlocationsData>) => createQueryKey('getApiManagerEventlocations', options);

/**
 * Get Event Locations By Current Manager
 */
export const getApiManagerEventlocationsOptions = (options?: Options<GetApiManagerEventlocationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerEventlocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerEventlocationsQueryKey(options)
    });
};

export const postApiManagerEventlocationsQueryKey = (options: Options<PostApiManagerEventlocationsData>) => createQueryKey('postApiManagerEventlocations', options);

/**
 * Create Event Location
 */
export const postApiManagerEventlocationsOptions = (options: Options<PostApiManagerEventlocationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerEventlocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerEventlocationsQueryKey(options)
    });
};

/**
 * Create Event Location
 */
export const postApiManagerEventlocationsMutation = (options?: Partial<Options<PostApiManagerEventlocationsData>>): UseMutationOptions<PostApiManagerEventlocationsResponse, DefaultError, Options<PostApiManagerEventlocationsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventlocationsResponse, DefaultError, Options<PostApiManagerEventlocationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerEventlocations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiManagerEventlocationsImportQueryKey = (options: Options<PostApiManagerEventlocationsImportData>) => createQueryKey('postApiManagerEventlocationsImport', options);

/**
 * Create Event Location With Seats
 */
export const postApiManagerEventlocationsImportOptions = (options: Options<PostApiManagerEventlocationsImportData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerEventlocationsImport({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerEventlocationsImportQueryKey(options)
    });
};

/**
 * Create Event Location With Seats
 */
export const postApiManagerEventlocationsImportMutation = (options?: Partial<Options<PostApiManagerEventlocationsImportData>>): UseMutationOptions<PostApiManagerEventlocationsImportResponse, DefaultError, Options<PostApiManagerEventlocationsImportData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventlocationsImportResponse, DefaultError, Options<PostApiManagerEventlocationsImportData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerEventlocationsImport({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiManagerEventlocationsImportByIdQueryKey = (options: Options<PostApiManagerEventlocationsImportByIdData>) => createQueryKey('postApiManagerEventlocationsImportById', options);

/**
 * Import Seats To Event Location
 */
export const postApiManagerEventlocationsImportByIdOptions = (options: Options<PostApiManagerEventlocationsImportByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerEventlocationsImportById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerEventlocationsImportByIdQueryKey(options)
    });
};

/**
 * Import Seats To Event Location
 */
export const postApiManagerEventlocationsImportByIdMutation = (options?: Partial<Options<PostApiManagerEventlocationsImportByIdData>>): UseMutationOptions<PostApiManagerEventlocationsImportByIdResponse, DefaultError, Options<PostApiManagerEventlocationsImportByIdData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventlocationsImportByIdResponse, DefaultError, Options<PostApiManagerEventlocationsImportByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerEventlocationsImportById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Event Location
 */
export const deleteApiManagerEventlocationsByIdMutation = (options?: Partial<Options<DeleteApiManagerEventlocationsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiManagerEventlocationsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiManagerEventlocationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiManagerEventlocationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Event Location
 */
export const putApiManagerEventlocationsByIdMutation = (options?: Partial<Options<PutApiManagerEventlocationsByIdData>>): UseMutationOptions<PutApiManagerEventlocationsByIdResponse, DefaultError, Options<PutApiManagerEventlocationsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerEventlocationsByIdResponse, DefaultError, Options<PutApiManagerEventlocationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiManagerEventlocationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerEventsQueryKey = (options?: Options<GetApiManagerEventsData>) => createQueryKey('getApiManagerEvents', options);

/**
 * Get Events By Current Manager
 */
export const getApiManagerEventsOptions = (options?: Options<GetApiManagerEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerEventsQueryKey(options)
    });
};

export const postApiManagerEventsQueryKey = (options: Options<PostApiManagerEventsData>) => createQueryKey('postApiManagerEvents', options);

/**
 * Create Event
 */
export const postApiManagerEventsOptions = (options: Options<PostApiManagerEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerEventsQueryKey(options)
    });
};

/**
 * Create Event
 */
export const postApiManagerEventsMutation = (options?: Partial<Options<PostApiManagerEventsData>>): UseMutationOptions<PostApiManagerEventsResponse, DefaultError, Options<PostApiManagerEventsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventsResponse, DefaultError, Options<PostApiManagerEventsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerEvents({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Event
 */
export const deleteApiManagerEventsByIdMutation = (options?: Partial<Options<DeleteApiManagerEventsByIdData>>): UseMutationOptions<DeleteApiManagerEventsByIdResponse, DefaultError, Options<DeleteApiManagerEventsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerEventsByIdResponse, DefaultError, Options<DeleteApiManagerEventsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiManagerEventsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerEventsByIdQueryKey = (options: Options<GetApiManagerEventsByIdData>) => createQueryKey('getApiManagerEventsById', options);

/**
 * Get Event By Id
 */
export const getApiManagerEventsByIdOptions = (options: Options<GetApiManagerEventsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerEventsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerEventsByIdQueryKey(options)
    });
};

/**
 * Update Event
 */
export const putApiManagerEventsByIdMutation = (options?: Partial<Options<PutApiManagerEventsByIdData>>): UseMutationOptions<PutApiManagerEventsByIdResponse, DefaultError, Options<PutApiManagerEventsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerEventsByIdResponse, DefaultError, Options<PutApiManagerEventsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiManagerEventsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationAllowanceQueryKey = (options?: Options<GetApiManagerReservationAllowanceData>) => createQueryKey('getApiManagerReservationAllowance', options);

/**
 * Get Reservation Allowances
 */
export const getApiManagerReservationAllowanceOptions = (options?: Options<GetApiManagerReservationAllowanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationAllowance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationAllowanceQueryKey(options)
    });
};

export const postApiManagerReservationAllowanceQueryKey = (options: Options<PostApiManagerReservationAllowanceData>) => createQueryKey('postApiManagerReservationAllowance', options);

/**
 * Set Reservations Allowed For User
 */
export const postApiManagerReservationAllowanceOptions = (options: Options<PostApiManagerReservationAllowanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerReservationAllowance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerReservationAllowanceQueryKey(options)
    });
};

/**
 * Set Reservations Allowed For User
 */
export const postApiManagerReservationAllowanceMutation = (options?: Partial<Options<PostApiManagerReservationAllowanceData>>): UseMutationOptions<PostApiManagerReservationAllowanceResponse, DefaultError, Options<PostApiManagerReservationAllowanceData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerReservationAllowanceResponse, DefaultError, Options<PostApiManagerReservationAllowanceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerReservationAllowance({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Reservation Allowance
 */
export const putApiManagerReservationAllowanceMutation = (options?: Partial<Options<PutApiManagerReservationAllowanceData>>): UseMutationOptions<PutApiManagerReservationAllowanceResponse, DefaultError, Options<PutApiManagerReservationAllowanceData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerReservationAllowanceResponse, DefaultError, Options<PutApiManagerReservationAllowanceData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiManagerReservationAllowance({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationAllowanceEventByEventIdQueryKey = (options: Options<GetApiManagerReservationAllowanceEventByEventIdData>) => createQueryKey('getApiManagerReservationAllowanceEventByEventId', options);

/**
 * Get Reservation Allowances By Event Id
 */
export const getApiManagerReservationAllowanceEventByEventIdOptions = (options: Options<GetApiManagerReservationAllowanceEventByEventIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationAllowanceEventByEventId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationAllowanceEventByEventIdQueryKey(options)
    });
};

/**
 * Delete Reservation Allowance
 */
export const deleteApiManagerReservationAllowanceByIdMutation = (options?: Partial<Options<DeleteApiManagerReservationAllowanceByIdData>>): UseMutationOptions<DeleteApiManagerReservationAllowanceByIdResponse, DefaultError, Options<DeleteApiManagerReservationAllowanceByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerReservationAllowanceByIdResponse, DefaultError, Options<DeleteApiManagerReservationAllowanceByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiManagerReservationAllowanceById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationAllowanceByIdQueryKey = (options: Options<GetApiManagerReservationAllowanceByIdData>) => createQueryKey('getApiManagerReservationAllowanceById', options);

/**
 * Get Reservation Allowance By Id
 */
export const getApiManagerReservationAllowanceByIdOptions = (options: Options<GetApiManagerReservationAllowanceByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationAllowanceById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationAllowanceByIdQueryKey(options)
    });
};

export const getApiManagerReservationsQueryKey = (options?: Options<GetApiManagerReservationsData>) => createQueryKey('getApiManagerReservations', options);

/**
 * Get All Reservations
 */
export const getApiManagerReservationsOptions = (options?: Options<GetApiManagerReservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsQueryKey(options)
    });
};

export const postApiManagerReservationsQueryKey = (options: Options<PostApiManagerReservationsData>) => createQueryKey('postApiManagerReservations', options);

/**
 * Create Reservations
 */
export const postApiManagerReservationsOptions = (options: Options<PostApiManagerReservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerReservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerReservationsQueryKey(options)
    });
};

/**
 * Create Reservations
 */
export const postApiManagerReservationsMutation = (options?: Partial<Options<PostApiManagerReservationsData>>): UseMutationOptions<PostApiManagerReservationsResponse, DefaultError, Options<PostApiManagerReservationsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerReservationsResponse, DefaultError, Options<PostApiManagerReservationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerReservations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postApiManagerReservationsBlockQueryKey = (options: Options<PostApiManagerReservationsBlockData>) => createQueryKey('postApiManagerReservationsBlock', options);

/**
 * Block Seats
 */
export const postApiManagerReservationsBlockOptions = (options: Options<PostApiManagerReservationsBlockData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerReservationsBlock({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerReservationsBlockQueryKey(options)
    });
};

/**
 * Block Seats
 */
export const postApiManagerReservationsBlockMutation = (options?: Partial<Options<PostApiManagerReservationsBlockData>>): UseMutationOptions<PostApiManagerReservationsBlockResponse, DefaultError, Options<PostApiManagerReservationsBlockData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerReservationsBlockResponse, DefaultError, Options<PostApiManagerReservationsBlockData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerReservationsBlock({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationsEventByIdQueryKey = (options: Options<GetApiManagerReservationsEventByIdData>) => createQueryKey('getApiManagerReservationsEventById', options);

/**
 * Get Reservations By Event Id
 */
export const getApiManagerReservationsEventByIdOptions = (options: Options<GetApiManagerReservationsEventByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationsEventById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsEventByIdQueryKey(options)
    });
};

/**
 * Delete Reservation
 */
export const deleteApiManagerReservationsByIdMutation = (options?: Partial<Options<DeleteApiManagerReservationsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiManagerReservationsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiManagerReservationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiManagerReservationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationsByIdQueryKey = (options: Options<GetApiManagerReservationsByIdData>) => createQueryKey('getApiManagerReservationsById', options);

/**
 * Get Reservation By Id
 */
export const getApiManagerReservationsByIdOptions = (options: Options<GetApiManagerReservationsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsByIdQueryKey(options)
    });
};

export const getApiManagerSeatsQueryKey = (options?: Options<GetApiManagerSeatsData>) => createQueryKey('getApiManagerSeats', options);

/**
 * Get All Manager Seats
 */
export const getApiManagerSeatsOptions = (options?: Options<GetApiManagerSeatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerSeats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerSeatsQueryKey(options)
    });
};

export const postApiManagerSeatsQueryKey = (options: Options<PostApiManagerSeatsData>) => createQueryKey('postApiManagerSeats', options);

/**
 * Create Seat
 */
export const postApiManagerSeatsOptions = (options: Options<PostApiManagerSeatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiManagerSeats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiManagerSeatsQueryKey(options)
    });
};

/**
 * Create Seat
 */
export const postApiManagerSeatsMutation = (options?: Partial<Options<PostApiManagerSeatsData>>): UseMutationOptions<PostApiManagerSeatsResponse, DefaultError, Options<PostApiManagerSeatsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerSeatsResponse, DefaultError, Options<PostApiManagerSeatsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiManagerSeats({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Manager Seat
 */
export const deleteApiManagerSeatsByIdMutation = (options?: Partial<Options<DeleteApiManagerSeatsByIdData>>): UseMutationOptions<unknown, DefaultError, Options<DeleteApiManagerSeatsByIdData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<DeleteApiManagerSeatsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiManagerSeatsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerSeatsByIdQueryKey = (options: Options<GetApiManagerSeatsByIdData>) => createQueryKey('getApiManagerSeatsById', options);

/**
 * Get Manager Seat By Id
 */
export const getApiManagerSeatsByIdOptions = (options: Options<GetApiManagerSeatsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerSeatsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerSeatsByIdQueryKey(options)
    });
};

/**
 * Update Manager Seat
 */
export const putApiManagerSeatsByIdMutation = (options?: Partial<Options<PutApiManagerSeatsByIdData>>): UseMutationOptions<PutApiManagerSeatsByIdResponse, DefaultError, Options<PutApiManagerSeatsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerSeatsByIdResponse, DefaultError, Options<PutApiManagerSeatsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiManagerSeatsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserConfirmEmailQueryKey = (options?: Options<GetApiUserConfirmEmailData>) => createQueryKey('getApiUserConfirmEmail', options);

/**
 * Confirm email address
 * Confirms a user's email address using the provided token
 */
export const getApiUserConfirmEmailOptions = (options?: Options<GetApiUserConfirmEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserConfirmEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserConfirmEmailQueryKey(options)
    });
};

export const getApiUserEventsQueryKey = (options?: Options<GetApiUserEventsData>) => createQueryKey('getApiUserEvents', options);

/**
 * Get Events
 */
export const getApiUserEventsOptions = (options?: Options<GetApiUserEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserEventsQueryKey(options)
    });
};

export const postApiUserResendEmailConfirmationQueryKey = (options?: Options<PostApiUserResendEmailConfirmationData>) => createQueryKey('postApiUserResendEmailConfirmation', options);

/**
 * Resend email confirmation
 * Resends the email confirmation for the authenticated user and extends the token's lifetime.
 */
export const postApiUserResendEmailConfirmationOptions = (options?: Options<PostApiUserResendEmailConfirmationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiUserResendEmailConfirmation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiUserResendEmailConfirmationQueryKey(options)
    });
};

/**
 * Resend email confirmation
 * Resends the email confirmation for the authenticated user and extends the token's lifetime.
 */
export const postApiUserResendEmailConfirmationMutation = (options?: Partial<Options<PostApiUserResendEmailConfirmationData>>): UseMutationOptions<PostApiUserResendEmailConfirmationResponse, DefaultError, Options<PostApiUserResendEmailConfirmationData>> => {
    const mutationOptions: UseMutationOptions<PostApiUserResendEmailConfirmationResponse, DefaultError, Options<PostApiUserResendEmailConfirmationData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiUserResendEmailConfirmation({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserReservationsQueryKey = (options?: Options<GetApiUserReservationsData>) => createQueryKey('getApiUserReservations', options);

/**
 * Get My Reservations
 */
export const getApiUserReservationsOptions = (options?: Options<GetApiUserReservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserReservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserReservationsQueryKey(options)
    });
};

export const postApiUserReservationsQueryKey = (options: Options<PostApiUserReservationsData>) => createQueryKey('postApiUserReservations', options);

/**
 * Create Reservation
 */
export const postApiUserReservationsOptions = (options: Options<PostApiUserReservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiUserReservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiUserReservationsQueryKey(options)
    });
};

/**
 * Create Reservation
 */
export const postApiUserReservationsMutation = (options?: Partial<Options<PostApiUserReservationsData>>): UseMutationOptions<PostApiUserReservationsResponse, DefaultError, Options<PostApiUserReservationsData>> => {
    const mutationOptions: UseMutationOptions<PostApiUserReservationsResponse, DefaultError, Options<PostApiUserReservationsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiUserReservations({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserReservationsExportByEventIdCsvQueryKey = (options: Options<GetApiUserReservationsExportByEventIdCsvData>) => createQueryKey('getApiUserReservationsExportByEventIdCsv', options);

/**
 * Export Reservations To Csv
 */
export const getApiUserReservationsExportByEventIdCsvOptions = (options: Options<GetApiUserReservationsExportByEventIdCsvData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserReservationsExportByEventIdCsv({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserReservationsExportByEventIdCsvQueryKey(options)
    });
};

/**
 * Delete Reservation
 */
export const deleteApiUserReservationsByIdMutation = (options?: Partial<Options<DeleteApiUserReservationsByIdData>>): UseMutationOptions<DeleteApiUserReservationsByIdResponse, DefaultError, Options<DeleteApiUserReservationsByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUserReservationsByIdResponse, DefaultError, Options<DeleteApiUserReservationsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiUserReservationsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserReservationsByIdQueryKey = (options: Options<GetApiUserReservationsByIdData>) => createQueryKey('getApiUserReservationsById', options);

/**
 * Get My Reservation By Id
 */
export const getApiUserReservationsByIdOptions = (options: Options<GetApiUserReservationsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserReservationsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserReservationsByIdQueryKey(options)
    });
};

export const getApiUsersAdminQueryKey = (options?: Options<GetApiUsersAdminData>) => createQueryKey('getApiUsersAdmin', options);

/**
 * Get All Users As Admin
 */
export const getApiUsersAdminOptions = (options?: Options<GetApiUsersAdminData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersAdmin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersAdminQueryKey(options)
    });
};

export const postApiUsersAdminQueryKey = (options: Options<PostApiUsersAdminData>) => createQueryKey('postApiUsersAdmin', options);

/**
 * Create User
 */
export const postApiUsersAdminOptions = (options: Options<PostApiUsersAdminData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postApiUsersAdmin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postApiUsersAdminQueryKey(options)
    });
};

/**
 * Create User
 */
export const postApiUsersAdminMutation = (options?: Partial<Options<PostApiUsersAdminData>>): UseMutationOptions<PostApiUsersAdminResponse, DefaultError, Options<PostApiUsersAdminData>> => {
    const mutationOptions: UseMutationOptions<PostApiUsersAdminResponse, DefaultError, Options<PostApiUsersAdminData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postApiUsersAdmin({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete User
 */
export const deleteApiUsersAdminByIdMutation = (options?: Partial<Options<DeleteApiUsersAdminByIdData>>): UseMutationOptions<DeleteApiUsersAdminByIdResponse, DefaultError, Options<DeleteApiUsersAdminByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUsersAdminByIdResponse, DefaultError, Options<DeleteApiUsersAdminByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteApiUsersAdminById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update User
 */
export const putApiUsersAdminByIdMutation = (options?: Partial<Options<PutApiUsersAdminByIdData>>): UseMutationOptions<PutApiUsersAdminByIdResponse, DefaultError, Options<PutApiUsersAdminByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiUsersAdminByIdResponse, DefaultError, Options<PutApiUsersAdminByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiUsersAdminById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersManagerQueryKey = (options?: Options<GetApiUsersManagerData>) => createQueryKey('getApiUsersManager', options);

/**
 * Get All Users
 */
export const getApiUsersManagerOptions = (options?: Options<GetApiUsersManagerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersManager({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersManagerQueryKey(options)
    });
};

export const getApiUsersMeQueryKey = (options?: Options<GetApiUsersMeData>) => createQueryKey('getApiUsersMe', options);

/**
 * Get Current User
 */
export const getApiUsersMeOptions = (options?: Options<GetApiUsersMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersMeQueryKey(options)
    });
};

/**
 * Update Current User Profile
 */
export const putApiUsersMeMutation = (options?: Partial<Options<PutApiUsersMeData>>): UseMutationOptions<PutApiUsersMeResponse, DefaultError, Options<PutApiUsersMeData>> => {
    const mutationOptions: UseMutationOptions<PutApiUsersMeResponse, DefaultError, Options<PutApiUsersMeData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putApiUsersMe({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersRolesQueryKey = (options?: Options<GetApiUsersRolesData>) => createQueryKey('getApiUsersRoles', options);

/**
 * Available Roles
 */
export const getApiUsersRolesOptions = (options?: Options<GetApiUsersRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersRolesQueryKey(options)
    });
};