// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { deleteApiManagerEventlocations, deleteApiManagerEvents, deleteApiManagerReservationAllowance, deleteApiManagerReservations, deleteApiManagerSeats, deleteApiUserReservations, deleteApiUsersAdminById, getApiManagerEventlocations, getApiManagerEvents, getApiManagerEventsById, getApiManagerReservationAllowance, getApiManagerReservationAllowanceById, getApiManagerReservationAllowanceEventByEventId, getApiManagerReservations, getApiManagerReservationsById, getApiManagerReservationsEventById, getApiManagerReservationsExportByEventIdCsv, getApiManagerReservationsExportByEventIdPdf, getApiManagerSeats, getApiManagerSeatsById, getApiUserEvents, getApiUserLocations, getApiUserReservations, getApiUserReservationsById, getApiUsersAdmin, getApiUsersManager, getApiUsersMe, getApiUsersRoles, type Options, postApiAuthLogin, postApiAuthLogout, postApiAuthLogoutAllDevices, postApiAuthRefresh, postApiAuthRegister, postApiManagerEventlocations, postApiManagerEventlocationsImport, postApiManagerEventlocationsImportById, postApiManagerEvents, postApiManagerReservationAllowance, postApiManagerReservations, postApiManagerReservationsBlock, postApiManagerSeats, postApiUserResendEmailConfirmation, postApiUserReservations, postApiUsersAdmin, postApiUsersAdminImport, postApiUserVerifyEmailCode, putApiManagerEventlocationsById, putApiManagerEventsById, putApiManagerReservationAllowance, putApiManagerSeatsById, putApiUsersAdminById, putApiUsersMe } from '../sdk.gen';
import type { DeleteApiManagerEventlocationsData, DeleteApiManagerEventlocationsResponse, DeleteApiManagerEventsData, DeleteApiManagerEventsResponse, DeleteApiManagerReservationAllowanceData, DeleteApiManagerReservationAllowanceResponse, DeleteApiManagerReservationsData, DeleteApiManagerReservationsResponse, DeleteApiManagerSeatsData, DeleteApiManagerSeatsResponse, DeleteApiUserReservationsData, DeleteApiUserReservationsResponse, DeleteApiUsersAdminByIdData, DeleteApiUsersAdminByIdResponse, GetApiManagerEventlocationsData, GetApiManagerEventsByIdData, GetApiManagerEventsData, GetApiManagerReservationAllowanceByIdData, GetApiManagerReservationAllowanceData, GetApiManagerReservationAllowanceEventByEventIdData, GetApiManagerReservationsByIdData, GetApiManagerReservationsData, GetApiManagerReservationsEventByIdData, GetApiManagerReservationsExportByEventIdCsvData, GetApiManagerReservationsExportByEventIdPdfData, GetApiManagerSeatsByIdData, GetApiManagerSeatsData, GetApiUserEventsData, GetApiUserLocationsData, GetApiUserReservationsByIdData, GetApiUserReservationsData, GetApiUsersAdminData, GetApiUsersManagerData, GetApiUsersMeData, GetApiUsersRolesData, PostApiAuthLoginData, PostApiAuthLogoutAllDevicesData, PostApiAuthLogoutData, PostApiAuthRefreshData, PostApiAuthRegisterData, PostApiManagerEventlocationsData, PostApiManagerEventlocationsImportByIdData, PostApiManagerEventlocationsImportByIdResponse, PostApiManagerEventlocationsImportData, PostApiManagerEventlocationsImportResponse, PostApiManagerEventlocationsResponse, PostApiManagerEventsData, PostApiManagerEventsResponse, PostApiManagerReservationAllowanceData, PostApiManagerReservationAllowanceResponse, PostApiManagerReservationsBlockData, PostApiManagerReservationsBlockResponse, PostApiManagerReservationsData, PostApiManagerReservationsResponse, PostApiManagerSeatsData, PostApiManagerSeatsResponse, PostApiUserResendEmailConfirmationData, PostApiUserResendEmailConfirmationResponse, PostApiUserReservationsData, PostApiUserReservationsResponse, PostApiUsersAdminData, PostApiUsersAdminImportData, PostApiUsersAdminImportResponse, PostApiUserVerifyEmailCodeData, PutApiManagerEventlocationsByIdData, PutApiManagerEventlocationsByIdResponse, PutApiManagerEventsByIdData, PutApiManagerEventsByIdResponse, PutApiManagerReservationAllowanceData, PutApiManagerReservationAllowanceResponse, PutApiManagerSeatsByIdData, PutApiManagerSeatsByIdResponse, PutApiUsersAdminByIdData, PutApiUsersAdminByIdResponse, PutApiUsersMeData, PutApiUsersMeResponse } from '../types.gen';

/**
 * Login
 */
export const postApiAuthLoginMutation = (options?: Partial<Options<PostApiAuthLoginData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLoginData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLoginData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthLogin({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Logout
 */
export const postApiAuthLogoutMutation = (options?: Partial<Options<PostApiAuthLogoutData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLogoutData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLogoutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthLogout({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Logout All Devices
 */
export const postApiAuthLogoutAllDevicesMutation = (options?: Partial<Options<PostApiAuthLogoutAllDevicesData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLogoutAllDevicesData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthLogoutAllDevicesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthLogoutAllDevices({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Refresh Token
 */
export const postApiAuthRefreshMutation = (options?: Partial<Options<PostApiAuthRefreshData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthRefreshData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthRefreshData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthRefresh({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Register
 */
export const postApiAuthRegisterMutation = (options?: Partial<Options<PostApiAuthRegisterData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiAuthRegisterData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiAuthRegisterData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiAuthRegister({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Event Location
 */
export const deleteApiManagerEventlocationsMutation = (options?: Partial<Options<DeleteApiManagerEventlocationsData>>): UseMutationOptions<DeleteApiManagerEventlocationsResponse, DefaultError, Options<DeleteApiManagerEventlocationsData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerEventlocationsResponse, DefaultError, Options<DeleteApiManagerEventlocationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiManagerEventlocations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getApiManagerEventlocationsQueryKey = (options?: Options<GetApiManagerEventlocationsData>) => createQueryKey('getApiManagerEventlocations', options);

/**
 * Get Event Locations By Current Manager
 */
export const getApiManagerEventlocationsOptions = (options?: Options<GetApiManagerEventlocationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerEventlocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerEventlocationsQueryKey(options)
    });
};

/**
 * Create Event Location
 */
export const postApiManagerEventlocationsMutation = (options?: Partial<Options<PostApiManagerEventlocationsData>>): UseMutationOptions<PostApiManagerEventlocationsResponse, DefaultError, Options<PostApiManagerEventlocationsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventlocationsResponse, DefaultError, Options<PostApiManagerEventlocationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerEventlocations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Create Event Location With Seats
 */
export const postApiManagerEventlocationsImportMutation = (options?: Partial<Options<PostApiManagerEventlocationsImportData>>): UseMutationOptions<PostApiManagerEventlocationsImportResponse, DefaultError, Options<PostApiManagerEventlocationsImportData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventlocationsImportResponse, DefaultError, Options<PostApiManagerEventlocationsImportData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerEventlocationsImport({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Import Seats To Event Location
 */
export const postApiManagerEventlocationsImportByIdMutation = (options?: Partial<Options<PostApiManagerEventlocationsImportByIdData>>): UseMutationOptions<PostApiManagerEventlocationsImportByIdResponse, DefaultError, Options<PostApiManagerEventlocationsImportByIdData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventlocationsImportByIdResponse, DefaultError, Options<PostApiManagerEventlocationsImportByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerEventlocationsImportById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Event Location
 */
export const putApiManagerEventlocationsByIdMutation = (options?: Partial<Options<PutApiManagerEventlocationsByIdData>>): UseMutationOptions<PutApiManagerEventlocationsByIdResponse, DefaultError, Options<PutApiManagerEventlocationsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerEventlocationsByIdResponse, DefaultError, Options<PutApiManagerEventlocationsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiManagerEventlocationsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Event
 */
export const deleteApiManagerEventsMutation = (options?: Partial<Options<DeleteApiManagerEventsData>>): UseMutationOptions<DeleteApiManagerEventsResponse, DefaultError, Options<DeleteApiManagerEventsData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerEventsResponse, DefaultError, Options<DeleteApiManagerEventsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiManagerEvents({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerEventsQueryKey = (options?: Options<GetApiManagerEventsData>) => createQueryKey('getApiManagerEvents', options);

/**
 * Get Events By Current Manager
 */
export const getApiManagerEventsOptions = (options?: Options<GetApiManagerEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerEventsQueryKey(options)
    });
};

/**
 * Create Event
 */
export const postApiManagerEventsMutation = (options?: Partial<Options<PostApiManagerEventsData>>): UseMutationOptions<PostApiManagerEventsResponse, DefaultError, Options<PostApiManagerEventsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerEventsResponse, DefaultError, Options<PostApiManagerEventsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerEvents({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerEventsByIdQueryKey = (options: Options<GetApiManagerEventsByIdData>) => createQueryKey('getApiManagerEventsById', options);

/**
 * Get Event By Id
 */
export const getApiManagerEventsByIdOptions = (options: Options<GetApiManagerEventsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerEventsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerEventsByIdQueryKey(options)
    });
};

/**
 * Update Event
 */
export const putApiManagerEventsByIdMutation = (options?: Partial<Options<PutApiManagerEventsByIdData>>): UseMutationOptions<PutApiManagerEventsByIdResponse, DefaultError, Options<PutApiManagerEventsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerEventsByIdResponse, DefaultError, Options<PutApiManagerEventsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiManagerEventsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Reservation Allowance
 */
export const deleteApiManagerReservationAllowanceMutation = (options?: Partial<Options<DeleteApiManagerReservationAllowanceData>>): UseMutationOptions<DeleteApiManagerReservationAllowanceResponse, DefaultError, Options<DeleteApiManagerReservationAllowanceData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerReservationAllowanceResponse, DefaultError, Options<DeleteApiManagerReservationAllowanceData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiManagerReservationAllowance({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationAllowanceQueryKey = (options?: Options<GetApiManagerReservationAllowanceData>) => createQueryKey('getApiManagerReservationAllowance', options);

/**
 * Get Reservation Allowances
 */
export const getApiManagerReservationAllowanceOptions = (options?: Options<GetApiManagerReservationAllowanceData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationAllowance({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationAllowanceQueryKey(options)
    });
};

/**
 * Set Reservations Allowed For User
 */
export const postApiManagerReservationAllowanceMutation = (options?: Partial<Options<PostApiManagerReservationAllowanceData>>): UseMutationOptions<PostApiManagerReservationAllowanceResponse, DefaultError, Options<PostApiManagerReservationAllowanceData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerReservationAllowanceResponse, DefaultError, Options<PostApiManagerReservationAllowanceData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerReservationAllowance({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update Reservation Allowance
 */
export const putApiManagerReservationAllowanceMutation = (options?: Partial<Options<PutApiManagerReservationAllowanceData>>): UseMutationOptions<PutApiManagerReservationAllowanceResponse, DefaultError, Options<PutApiManagerReservationAllowanceData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerReservationAllowanceResponse, DefaultError, Options<PutApiManagerReservationAllowanceData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiManagerReservationAllowance({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationAllowanceEventByEventIdQueryKey = (options: Options<GetApiManagerReservationAllowanceEventByEventIdData>) => createQueryKey('getApiManagerReservationAllowanceEventByEventId', options);

/**
 * Get Reservation Allowances By Event Id
 */
export const getApiManagerReservationAllowanceEventByEventIdOptions = (options: Options<GetApiManagerReservationAllowanceEventByEventIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationAllowanceEventByEventId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationAllowanceEventByEventIdQueryKey(options)
    });
};

export const getApiManagerReservationAllowanceByIdQueryKey = (options: Options<GetApiManagerReservationAllowanceByIdData>) => createQueryKey('getApiManagerReservationAllowanceById', options);

/**
 * Get Reservation Allowance By Id
 */
export const getApiManagerReservationAllowanceByIdOptions = (options: Options<GetApiManagerReservationAllowanceByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationAllowanceById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationAllowanceByIdQueryKey(options)
    });
};

/**
 * Delete Reservation
 */
export const deleteApiManagerReservationsMutation = (options?: Partial<Options<DeleteApiManagerReservationsData>>): UseMutationOptions<DeleteApiManagerReservationsResponse, DefaultError, Options<DeleteApiManagerReservationsData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerReservationsResponse, DefaultError, Options<DeleteApiManagerReservationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiManagerReservations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationsQueryKey = (options?: Options<GetApiManagerReservationsData>) => createQueryKey('getApiManagerReservations', options);

/**
 * Get All Reservations
 */
export const getApiManagerReservationsOptions = (options?: Options<GetApiManagerReservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsQueryKey(options)
    });
};

/**
 * Create Reservations
 */
export const postApiManagerReservationsMutation = (options?: Partial<Options<PostApiManagerReservationsData>>): UseMutationOptions<PostApiManagerReservationsResponse, DefaultError, Options<PostApiManagerReservationsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerReservationsResponse, DefaultError, Options<PostApiManagerReservationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerReservations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Block Seats
 */
export const postApiManagerReservationsBlockMutation = (options?: Partial<Options<PostApiManagerReservationsBlockData>>): UseMutationOptions<PostApiManagerReservationsBlockResponse, DefaultError, Options<PostApiManagerReservationsBlockData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerReservationsBlockResponse, DefaultError, Options<PostApiManagerReservationsBlockData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerReservationsBlock({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerReservationsEventByIdQueryKey = (options: Options<GetApiManagerReservationsEventByIdData>) => createQueryKey('getApiManagerReservationsEventById', options);

/**
 * Get Reservations By Event Id
 */
export const getApiManagerReservationsEventByIdOptions = (options: Options<GetApiManagerReservationsEventByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationsEventById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsEventByIdQueryKey(options)
    });
};

export const getApiManagerReservationsExportByEventIdCsvQueryKey = (options: Options<GetApiManagerReservationsExportByEventIdCsvData>) => createQueryKey('getApiManagerReservationsExportByEventIdCsv', options);

/**
 * Export Reservations To Csv
 */
export const getApiManagerReservationsExportByEventIdCsvOptions = (options: Options<GetApiManagerReservationsExportByEventIdCsvData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationsExportByEventIdCsv({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsExportByEventIdCsvQueryKey(options)
    });
};

export const getApiManagerReservationsExportByEventIdPdfQueryKey = (options: Options<GetApiManagerReservationsExportByEventIdPdfData>) => createQueryKey('getApiManagerReservationsExportByEventIdPdf', options);

/**
 * Export Reservations To Pdf
 */
export const getApiManagerReservationsExportByEventIdPdfOptions = (options: Options<GetApiManagerReservationsExportByEventIdPdfData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationsExportByEventIdPdf({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsExportByEventIdPdfQueryKey(options)
    });
};

export const getApiManagerReservationsByIdQueryKey = (options: Options<GetApiManagerReservationsByIdData>) => createQueryKey('getApiManagerReservationsById', options);

/**
 * Get Reservation By Id
 */
export const getApiManagerReservationsByIdOptions = (options: Options<GetApiManagerReservationsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerReservationsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerReservationsByIdQueryKey(options)
    });
};

/**
 * Delete Manager Seat
 */
export const deleteApiManagerSeatsMutation = (options?: Partial<Options<DeleteApiManagerSeatsData>>): UseMutationOptions<DeleteApiManagerSeatsResponse, DefaultError, Options<DeleteApiManagerSeatsData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiManagerSeatsResponse, DefaultError, Options<DeleteApiManagerSeatsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiManagerSeats({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerSeatsQueryKey = (options?: Options<GetApiManagerSeatsData>) => createQueryKey('getApiManagerSeats', options);

/**
 * Get All Manager Seats
 */
export const getApiManagerSeatsOptions = (options?: Options<GetApiManagerSeatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerSeats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerSeatsQueryKey(options)
    });
};

/**
 * Create Seat
 */
export const postApiManagerSeatsMutation = (options?: Partial<Options<PostApiManagerSeatsData>>): UseMutationOptions<PostApiManagerSeatsResponse, DefaultError, Options<PostApiManagerSeatsData>> => {
    const mutationOptions: UseMutationOptions<PostApiManagerSeatsResponse, DefaultError, Options<PostApiManagerSeatsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiManagerSeats({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiManagerSeatsByIdQueryKey = (options: Options<GetApiManagerSeatsByIdData>) => createQueryKey('getApiManagerSeatsById', options);

/**
 * Get Manager Seat By Id
 */
export const getApiManagerSeatsByIdOptions = (options: Options<GetApiManagerSeatsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiManagerSeatsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiManagerSeatsByIdQueryKey(options)
    });
};

/**
 * Update Manager Seat
 */
export const putApiManagerSeatsByIdMutation = (options?: Partial<Options<PutApiManagerSeatsByIdData>>): UseMutationOptions<PutApiManagerSeatsByIdResponse, DefaultError, Options<PutApiManagerSeatsByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiManagerSeatsByIdResponse, DefaultError, Options<PutApiManagerSeatsByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiManagerSeatsById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserEventsQueryKey = (options?: Options<GetApiUserEventsData>) => createQueryKey('getApiUserEvents', options);

/**
 * Get Events
 */
export const getApiUserEventsOptions = (options?: Options<GetApiUserEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserEventsQueryKey(options)
    });
};

export const getApiUserLocationsQueryKey = (options?: Options<GetApiUserLocationsData>) => createQueryKey('getApiUserLocations', options);

/**
 * Get Locations
 */
export const getApiUserLocationsOptions = (options?: Options<GetApiUserLocationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserLocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserLocationsQueryKey(options)
    });
};

/**
 * Resend email confirmation
 *
 * Resends the email confirmation for the authenticated user and extends the token's lifetime.
 */
export const postApiUserResendEmailConfirmationMutation = (options?: Partial<Options<PostApiUserResendEmailConfirmationData>>): UseMutationOptions<PostApiUserResendEmailConfirmationResponse, DefaultError, Options<PostApiUserResendEmailConfirmationData>> => {
    const mutationOptions: UseMutationOptions<PostApiUserResendEmailConfirmationResponse, DefaultError, Options<PostApiUserResendEmailConfirmationData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUserResendEmailConfirmation({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Reservation
 */
export const deleteApiUserReservationsMutation = (options?: Partial<Options<DeleteApiUserReservationsData>>): UseMutationOptions<DeleteApiUserReservationsResponse, DefaultError, Options<DeleteApiUserReservationsData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUserReservationsResponse, DefaultError, Options<DeleteApiUserReservationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiUserReservations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserReservationsQueryKey = (options?: Options<GetApiUserReservationsData>) => createQueryKey('getApiUserReservations', options);

/**
 * Get My Reservations
 */
export const getApiUserReservationsOptions = (options?: Options<GetApiUserReservationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserReservations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserReservationsQueryKey(options)
    });
};

/**
 * Create Reservation
 */
export const postApiUserReservationsMutation = (options?: Partial<Options<PostApiUserReservationsData>>): UseMutationOptions<PostApiUserReservationsResponse, DefaultError, Options<PostApiUserReservationsData>> => {
    const mutationOptions: UseMutationOptions<PostApiUserReservationsResponse, DefaultError, Options<PostApiUserReservationsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUserReservations({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUserReservationsByIdQueryKey = (options: Options<GetApiUserReservationsByIdData>) => createQueryKey('getApiUserReservationsById', options);

/**
 * Get My Reservation By Id
 */
export const getApiUserReservationsByIdOptions = (options: Options<GetApiUserReservationsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUserReservationsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUserReservationsByIdQueryKey(options)
    });
};

/**
 * Verify email with 6-digit code
 *
 * Verifies a user's email address using a 6-digit verification code
 */
export const postApiUserVerifyEmailCodeMutation = (options?: Partial<Options<PostApiUserVerifyEmailCodeData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiUserVerifyEmailCodeData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiUserVerifyEmailCodeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUserVerifyEmailCode({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersAdminQueryKey = (options?: Options<GetApiUsersAdminData>) => createQueryKey('getApiUsersAdmin', options);

/**
 * Get All Users As Admin
 */
export const getApiUsersAdminOptions = (options?: Options<GetApiUsersAdminData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersAdmin({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersAdminQueryKey(options)
    });
};

/**
 * Create User
 */
export const postApiUsersAdminMutation = (options?: Partial<Options<PostApiUsersAdminData>>): UseMutationOptions<unknown, DefaultError, Options<PostApiUsersAdminData>> => {
    const mutationOptions: UseMutationOptions<unknown, DefaultError, Options<PostApiUsersAdminData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUsersAdmin({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Import Users
 */
export const postApiUsersAdminImportMutation = (options?: Partial<Options<PostApiUsersAdminImportData>>): UseMutationOptions<PostApiUsersAdminImportResponse, DefaultError, Options<PostApiUsersAdminImportData>> => {
    const mutationOptions: UseMutationOptions<PostApiUsersAdminImportResponse, DefaultError, Options<PostApiUsersAdminImportData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postApiUsersAdminImport({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete User
 */
export const deleteApiUsersAdminByIdMutation = (options?: Partial<Options<DeleteApiUsersAdminByIdData>>): UseMutationOptions<DeleteApiUsersAdminByIdResponse, DefaultError, Options<DeleteApiUsersAdminByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteApiUsersAdminByIdResponse, DefaultError, Options<DeleteApiUsersAdminByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteApiUsersAdminById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Update User
 */
export const putApiUsersAdminByIdMutation = (options?: Partial<Options<PutApiUsersAdminByIdData>>): UseMutationOptions<PutApiUsersAdminByIdResponse, DefaultError, Options<PutApiUsersAdminByIdData>> => {
    const mutationOptions: UseMutationOptions<PutApiUsersAdminByIdResponse, DefaultError, Options<PutApiUsersAdminByIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiUsersAdminById({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersManagerQueryKey = (options?: Options<GetApiUsersManagerData>) => createQueryKey('getApiUsersManager', options);

/**
 * Get All Users
 */
export const getApiUsersManagerOptions = (options?: Options<GetApiUsersManagerData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersManager({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersManagerQueryKey(options)
    });
};

export const getApiUsersMeQueryKey = (options?: Options<GetApiUsersMeData>) => createQueryKey('getApiUsersMe', options);

/**
 * Get Current User
 */
export const getApiUsersMeOptions = (options?: Options<GetApiUsersMeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersMe({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersMeQueryKey(options)
    });
};

/**
 * Update Current User Profile
 */
export const putApiUsersMeMutation = (options?: Partial<Options<PutApiUsersMeData>>): UseMutationOptions<PutApiUsersMeResponse, DefaultError, Options<PutApiUsersMeData>> => {
    const mutationOptions: UseMutationOptions<PutApiUsersMeResponse, DefaultError, Options<PutApiUsersMeData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putApiUsersMe({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getApiUsersRolesQueryKey = (options?: Options<GetApiUsersRolesData>) => createQueryKey('getApiUsersRoles', options);

/**
 * Available Roles
 */
export const getApiUsersRolesOptions = (options?: Options<GetApiUsersRolesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getApiUsersRoles({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getApiUsersRolesQueryKey(options)
    });
};
