// This file is auto-generated by @hey-api/openapi-ts

export const AdminUserCreationDtoSchema = {
    type: 'object',
    required: ['username', 'password', 'firstname', 'lastname', 'sendEmailVerification', 'roles', 'tags'],
    properties: {
        username: {
            type: 'string',
            pattern: '^[a-zA-Z0-9._-]{3,64}$'
        },
        email: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        sendEmailVerification: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            },
            minItems: 1
        },
        tags: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const AdminUserUpdateDTOSchema = {
    type: 'object',
    properties: {
        email: {
            type: 'string'
        },
        emailVerified: {
            type: 'boolean'
        },
        sendEmailVerification: {
            type: 'boolean'
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        tags: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        },
        roles: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            },
            minItems: 1
        }
    },
    required: ['emailVerified', 'sendEmailVerification', 'firstname', 'lastname', 'tags', 'roles']
} as const;

export const BlockSeatsRequestDTOSchema = {
    type: 'object',
    properties: {
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        seatIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        }
    }
} as const;

export const EventLocationMakerDTOSchema = {
    type: 'object',
    properties: {
        label: {
            type: 'string'
        },
        xCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        yCoordinate: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const EventLocationRequestDTOSchema = {
    type: 'object',
    required: ['name', 'address', 'capacity'],
    properties: {
        name: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        capacity: {
            type: 'integer',
            format: 'int32'
        },
        markers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MakerRequestDTO'
            }
        }
    }
} as const;

export const EventLocationResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        capacity: {
            type: 'integer',
            format: 'int32'
        },
        manager: {
            '$ref': '#/components/schemas/LimitedUserInfoDTO'
        },
        seatIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        markers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventLocationMakerDTO'
            }
        }
    }
} as const;

export const EventRequestDTOSchema = {
    type: 'object',
    required: ['name', 'description', 'startTime', 'endTime', 'bookingDeadline', 'bookingStartTime', 'eventLocationId'],
    properties: {
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        startTime: {
            '$ref': '#/components/schemas/Instant'
        },
        endTime: {
            '$ref': '#/components/schemas/Instant'
        },
        bookingDeadline: {
            '$ref': '#/components/schemas/Instant'
        },
        bookingStartTime: {
            '$ref': '#/components/schemas/Instant'
        },
        eventLocationId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const EventResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        startTime: {
            '$ref': '#/components/schemas/Instant'
        },
        endTime: {
            '$ref': '#/components/schemas/Instant'
        },
        bookingDeadline: {
            '$ref': '#/components/schemas/Instant'
        },
        bookingStartTime: {
            '$ref': '#/components/schemas/Instant'
        },
        seatStatuses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeatStatusDTO'
            }
        },
        eventUserAllowancesIds: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        eventLocationId: {
            type: 'integer',
            format: 'int64'
        },
        managerId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const EventUserAllowanceUpdateDtoSchema = {
    type: 'object',
    required: ['id', 'eventId', 'userId', 'reservationsAllowedCount'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        userId: {
            type: 'integer',
            format: 'int64'
        },
        reservationsAllowedCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const EventUserAllowancesCreateDtoSchema = {
    type: 'object',
    required: ['eventId', 'userIds', 'reservationsAllowedCount'],
    properties: {
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        userIds: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'integer',
                format: 'int64'
            },
            minItems: 1
        },
        reservationsAllowedCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const EventUserAllowancesDtoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        userId: {
            type: 'integer',
            format: 'int64'
        },
        reservationsAllowedCount: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const ImportEventLocationDtoSchema = {
    type: 'object',
    required: ['name', 'address', 'capacity'],
    properties: {
        name: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        capacity: {
            type: 'integer',
            format: 'int32'
        },
        seats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImportSeatDto'
            }
        },
        markers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MakerRequestDTO'
            }
        }
    }
} as const;

export const ImportSeatDtoSchema = {
    type: 'object',
    required: ['seatNumber', 'xCoordinate', 'yCoordinate'],
    properties: {
        seatNumber: {
            type: 'string'
        },
        xCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        yCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        seatRow: {
            type: 'string'
        }
    }
} as const;

export const InstantSchema = {
    type: 'string',
    format: 'date-time',
    examples: ['2022-03-10T16:15:50Z']
} as const;

export const LimitedUserInfoDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        username: {
            type: 'string'
        },
        tags: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const LoginRequestDTOSchema = {
    type: 'object',
    required: ['username', 'password'],
    properties: {
        username: {
            type: 'string',
            pattern: '\\S'
        },
        password: {
            type: 'string',
            pattern: '\\S'
        }
    }
} as const;

export const MakerRequestDTOSchema = {
    type: 'object',
    required: ['label', 'xCoordinate', 'yCoordinate'],
    properties: {
        label: {
            type: 'string'
        },
        xCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        yCoordinate: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const RegisterRequestDTOSchema = {
    type: 'object',
    required: ['username', 'firstname', 'lastname', 'email', 'password'],
    properties: {
        username: {
            type: 'string',
            pattern: '^[a-zA-Z0-9._-]{3,64}$'
        },
        firstname: {
            type: 'string',
            pattern: '\\S'
        },
        lastname: {
            type: 'string',
            pattern: '\\S'
        },
        email: {
            type: 'string',
            pattern: '\\S'
        },
        password: {
            type: 'string',
            pattern: '\\S',
            minLength: 8
        }
    }
} as const;

export const ReservationRequestDTOSchema = {
    type: 'object',
    required: ['eventId', 'userId', 'seatIds'],
    properties: {
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        userId: {
            type: 'integer',
            format: 'int64'
        },
        seatIds: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        deductAllowance: {
            type: 'boolean'
        }
    }
} as const;

export const ReservationResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        user: {
            '$ref': '#/components/schemas/UserDTO'
        },
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        seat: {
            '$ref': '#/components/schemas/SeatDTO'
        },
        reservationDateTime: {
            '$ref': '#/components/schemas/Instant'
        },
        status: {
            '$ref': '#/components/schemas/ReservationStatus'
        }
    }
} as const;

export const ReservationStatusSchema = {
    type: 'string',
    enum: ['RESERVED', 'BLOCKED']
} as const;

export const SeatDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        seatNumber: {
            type: 'string'
        },
        seatRow: {
            type: 'string'
        },
        locationId: {
            type: 'integer',
            format: 'int64'
        },
        xCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        yCoordinate: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const SeatRequestDTOSchema = {
    type: 'object',
    required: ['seatNumber', 'eventLocationId', 'xCoordinate', 'yCoordinate', 'seatRow'],
    properties: {
        seatNumber: {
            type: 'string'
        },
        eventLocationId: {
            type: 'integer',
            format: 'int64'
        },
        xCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        yCoordinate: {
            type: 'integer',
            format: 'int32'
        },
        seatRow: {
            type: 'string'
        }
    }
} as const;

export const SeatStatusDTOSchema = {
    type: 'object',
    properties: {
        seatId: {
            type: 'integer',
            format: 'int64'
        },
        status: {
            '$ref': '#/components/schemas/ReservationStatus'
        }
    }
} as const;

export const UserDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        username: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        emailVerified: {
            type: 'boolean'
        },
        emailVerificationSent: {
            type: 'boolean'
        },
        roles: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        },
        tags: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const UserEventLocationResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        capacity: {
            type: 'integer',
            format: 'int32'
        },
        manager: {
            '$ref': '#/components/schemas/LimitedUserInfoDTO'
        },
        seats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeatDTO'
            }
        },
        markers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EventLocationMakerDTO'
            }
        }
    }
} as const;

export const UserEventResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        startTime: {
            '$ref': '#/components/schemas/Instant'
        },
        endTime: {
            '$ref': '#/components/schemas/Instant'
        },
        bookingDeadline: {
            '$ref': '#/components/schemas/Instant'
        },
        bookingStartTime: {
            '$ref': '#/components/schemas/Instant'
        },
        seatStatuses: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SeatStatusDTO'
            }
        },
        locationId: {
            type: 'integer',
            format: 'int64'
        },
        reservationsAllowed: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const UserProfileUpdateDTOSchema = {
    type: 'object',
    required: ['email', 'firstname', 'lastname', 'tags'],
    properties: {
        email: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        password: {
            type: 'string',
            minLength: 8
        },
        tags: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const UserReservationResponseDTOSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        userId: {
            type: 'integer',
            format: 'int64'
        },
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        seat: {
            '$ref': '#/components/schemas/SeatDTO'
        },
        reservationDateTime: {
            '$ref': '#/components/schemas/Instant'
        }
    }
} as const;

export const UserReservationsRequestDTOSchema = {
    type: 'object',
    required: ['eventId', 'seatIds'],
    properties: {
        eventId: {
            type: 'integer',
            format: 'int64'
        },
        seatIds: {
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'integer',
                format: 'int64'
            },
            minItems: 1
        }
    }
} as const;

export const VerifyEmailCodeRequestDtoSchema = {
    type: 'object',
    required: ['verificationCode'],
    properties: {
        verificationCode: {
            type: 'string',
            pattern: '\\d{6}'
        }
    }
} as const;
